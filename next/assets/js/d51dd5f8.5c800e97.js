"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[31320],{80958:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const l={toc:[]};function r(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Guide Coming Soon",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This how to guide is not available in your language of choice at the moment.\nPlease feel free to browse ",(0,o.kt)("a",{parentName:"p",href:"/next/wallet.rs/how_tos/more_examples"},"more examples")," which may suit your requirements.")))}r.isMDXComponent=!0},72907:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const l={toc:[]};function r(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Replace the native token ID",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Before you run the code example, make sure to update the token ID with one which is available in your account. If you\nhaven't done so already, you can follow the ",(0,o.kt)("a",{parentName:"p",href:"/next/wallet.rs/how_tos/native_tokens/mint_native_token"},"how to mint a native token guide"),". If you\ndon't know the token ID you can ",(0,o.kt)("a",{parentName:"p",href:"/next/wallet.rs/how_tos/accounts_and_addresses/check_balance"},"check your accounts balance")," to retrieve\nthe available native tokens in your account.")))}r.isMDXComponent=!0},65866:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const l={toc:[]};function r(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Dotenv",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"This example uses dotenv, which is not safe for use in production environments.")))}r.isMDXComponent=!0},43514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>k,default:()=>w,frontMatter:()=>m,metadata:()=>h,toc:()=>_});var a=n(87462),o=(n(67294),n(3905)),l=n(34259),r=n(18679),c=n(80958),i=n(69319);var d=n(65866);const s={toc:[{value:"Run the Example",id:"run-the-example",level:3}]};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(d.ZP,{mdxType:"DotEnvWarning"}),(0,o.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example burn_native_token --release\n// In this example we will burn an existing native token, this will not increase the melted supply in the foundry,\n// therefore the foundry output is also not required. But this will also make it impossible to destroy the foundry\n// output that minted it.\n// Rename `.env.example` to `.env` first\n\nuse std::{env, str::FromStr};\n\nuse dotenv::dotenv;\nuse iota_client::block::output::TokenId;\nuse iota_wallet::{account_manager::AccountManager, Result, U256};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // This example uses dotenv, which is not safe for use in production\n    dotenv().ok();\n\n    // Create the account manager\n    let manager = AccountManager::builder().finish().await?;\n\n    // Get the account we generated with `01_create_wallet`\n    let account = manager.get_account("Alice").await?;\n\n    let balance = account.balance().await?;\n    println!("Balance before burning:\\n{balance:?}",);\n\n    // Set the stronghold password\n    manager\n        .set_stronghold_password(&env::var("STRONGHOLD_PASSWORD").unwrap())\n        .await?;\n\n    // Replace with a TokenId that is available in the account\n    let token_id = TokenId::from_str("0x08847bd287c912fadedb6bf38900bda9f2d377b75b2a0bece8738699f56ebca4130100000000")?;\n\n    // Burn a native token\n    let burn_amount = U256::from(1);\n    let transaction = account.burn_native_token(token_id, burn_amount, None).await?;\n\n    let _ = match transaction.block_id {\n        Some(block_id) => account.retry_until_included(&block_id, None, None).await?,\n        None => {\n            return Err(iota_wallet::Error::BurningOrMeltingFailed(\n                "burn native token transaction failed to submitted".to_string(),\n            ));\n        }\n    };\n\n    let balance = account.sync(None).await?;\n\n    println!("Balance after burning:\\n{balance:?}",);\n\n    Ok(())\n}\n'),(0,o.kt)("h3",{id:"run-the-example"},"Run the Example"),(0,o.kt)("p",null,"Run the example by running the following command:"),(0,o.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},"cargo run --example burn_native_token --release"))}u.isMDXComponent=!0;const p={toc:[]};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext",metastring:"{10-14,45-49}","{10-14,45-49}":!0},"Balancebeforeburning: \n\nAccountBalance{\n  base_coin: BaseCoinBalance{\n    total: 209995515000,\n    available: 209995515000\n  },\n  required_storage_deposit: 1787500,\n  native_tokens: [\n    NativeTokensBalance{\n      token_id: TokenId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0300000000),\n      total: 100,\n      available: 100\n    }\n  ],\n  nfts: [\n    \n  ],\n  aliases: [\n    AliasId(0xadbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde)\n  ],\n  foundries: [\n    FoundryId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0200000000),\n    FoundryId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0100000000),\n    FoundryId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0300000000)\n  ],\n  potentially_locked_outputs: {\n    OutputId(0x452a212cbe8512ea7844759402f1679bc1c1e6a088f1f3faaed6aeaa0ac246ee0000): false,\n    OutputId(0xb8572c3386616ae4be668a46756fcc46bf9cdf178bd50122cf70c81dbec362200000): false,\n    OutputId(0x041a90dc4d9b23a3ef91c64b7aa69da27e90d3306f644fc7b1647016925d5ff30000): false,\n    OutputId(0xcb30fa5cbb34b7bb10c0408b4e2bbe323b73fcb9b30b0a9446c1866210cf82d80000): false,\n    OutputId(0x2c0a9874a309ac3ffce684a8d5f38be54f12760d40ef8fd72f043a11fd4b76110000): false\n  }\n}\n\nBalanceafterburning: \n\nAccountBalance{\n  base_coin: BaseCoinBalance{\n    total: 209995515000,\n    available: 209995515000\n  },\n  required_storage_deposit: 1787500,\n  native_tokens: [\n    NativeTokensBalance{\n      token_id: TokenId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0300000000),\n      total: 99,\n      available: 99\n    }\n  ],\n  nfts: [\n    \n  ],\n  aliases: [\n    AliasId(0xadbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde)\n  ],\n  foundries: [\n    FoundryId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0200000000),\n    FoundryId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0100000000),\n    FoundryId(0x08adbd5f0844fdc9bf4eafe2df929ac42cc90336e68da284cce96f22523bd87cde0300000000)\n  ],\n  potentially_locked_outputs: {\n    OutputId(0x2c0a9874a309ac3ffce684a8d5f38be54f12760d40ef8fd72f043a11fd4b76110000): false,\n    OutputId(0x452a212cbe8512ea7844759402f1679bc1c1e6a088f1f3faaed6aeaa0ac246ee0000): false,\n    OutputId(0x041a90dc4d9b23a3ef91c64b7aa69da27e90d3306f644fc7b1647016925d5ff30000): false,\n    OutputId(0xb8572c3386616ae4be668a46756fcc46bf9cdf178bd50122cf70c81dbec362200000): false,\n    OutputId(0xcb30fa5cbb34b7bb10c0408b4e2bbe323b73fcb9b30b0a9446c1866210cf82d80000): false\n  }\n}\n")))}f.isMDXComponent=!0;var b=n(72907);const m={title:"Burn Native Tokens",sidebar_label:"Burn",description:"How to burn native tokens",image:"/img/logo/iota_mark_light.png",keywords:["how to","burn","burn native token","foundry","nodejs","python","rust"]},k=void 0,h={unversionedId:"how_tos/native_tokens/burn_native_token",id:"how_tos/native_tokens/burn_native_token",title:"Burn Native Tokens",description:"How to burn native tokens",source:"@site/next/external/wallet.rs/documentation/docs/how_tos/native_tokens/04_burn_native_token.mdx",sourceDirName:"how_tos/native_tokens",slug:"/how_tos/native_tokens/burn_native_token",permalink:"/next/wallet.rs/how_tos/native_tokens/burn_native_token",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/next/external/wallet.rs/documentation/docs/how_tos/native_tokens/04_burn_native_token.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Burn Native Tokens",sidebar_label:"Burn",description:"How to burn native tokens",image:"/img/logo/iota_mark_light.png",keywords:["how to","burn","burn native token","foundry","nodejs","python","rust"]},sidebar:"docs",previous:{title:"Melt",permalink:"/next/wallet.rs/how_tos/native_tokens/melt_native_token"},next:{title:"Destroy a Foundry",permalink:"/next/wallet.rs/how_tos/native_tokens/destroy_foundry"}},v={},_=[{value:"Code Example",id:"code-example",level:2},{value:"Expected Output",id:"expected-output",level:2}],y={toc:_};function w(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You may want to burn some of your circulating native tokens. To do so, you will need to call the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Account.burn_native_token(native_token, options)")," function."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"If you burn your native tokens, you will not be able to destroy the foundry that created them. If you want to destroy\nthe foundry in the future, you should consider ",(0,o.kt)("a",{parentName:"p",href:"/next/wallet.rs/how_tos/native_tokens/melt_native_token"},"melting your native tokens"))),(0,o.kt)("h2",{id:"code-example"},"Code Example"),(0,o.kt)(b.ZP,{mdxType:"ReplaceNativeTokenId"}),(0,o.kt)("p",null,"The following example will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create an account manager."),(0,o.kt)("li",{parentName:"ol"},"Get Alice's account which was ",(0,o.kt)("a",{parentName:"li",href:"/next/wallet.rs/how_tos/accounts_and_addresses/create_a_wallet_account"},"created in the first guide"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"/next/wallet.rs/how_tos/accounts_and_addresses/check_balance"},"Get the account's balance"),"."),(0,o.kt)("li",{parentName:"ol"},"Burn 1 native tokens of the supplied ID.")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,o.kt)(u,{mdxType:"RustCode"})),(0,o.kt)(r.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,o.kt)(c.ZP,{mdxType:"NodejsCode"})),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(c.ZP,{mdxType:"PythonCode"}))),(0,o.kt)("h2",{id:"expected-output"},"Expected Output"),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,o.kt)(f,{mdxType:"RustOutput"})),(0,o.kt)(r.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,o.kt)(c.ZP,{mdxType:"NodejsOutput"})),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(c.ZP,{mdxType:"PythonOutput"}))))}w.isMDXComponent=!0},18679:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),o=n(86010);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:n},t)}},34259:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(87462),o=n(67294),l=n(86010),r=n(51048),c=n(33609),i=n(1943),d=n(72957);const s="tabList__CuJ",u="tabItem_LNqP";function p(e){var t;const{lazy:n,block:r,defaultValue:p,values:f,groupId:b,className:m}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=f??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,c.l)(h,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const _=null===p?p:p??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==_&&!h.some((e=>e.value===_)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${_}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,i.U)(),[x,g]=(0,o.useState)(_),T=[],{blockElementScrollPositionUntilNextRender:I}=(0,d.o5)();if(null!=b){const e=y[b];null!=e&&e!==x&&h.some((t=>t.value===e))&&g(e)}const N=e=>{const t=e.currentTarget,n=T.indexOf(t),a=h[n].value;a!==x&&(I(t),g(a),null!=b&&w(b,String(a)))},Z=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",s)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},m)},h.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>T.push(e),onKeyDown:Z,onFocus:N,onClick:N},r,{className:(0,l.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":x===t})}),n??t)}))),n?(0,o.cloneElement)(k.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function f(e){const t=(0,r.Z)();return o.createElement(p,(0,a.Z)({key:String(t)},e))}}}]);