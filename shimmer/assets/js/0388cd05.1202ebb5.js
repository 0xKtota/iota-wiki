"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[78481],{53855:(e,n,t)=>{t.d(n,{ZP:()=>s});var a=t(87462),o=(t(67294),t(3905));const i={toc:[]};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Guide Coming Soon",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This how to guide is not available in your language of choice at the moment.\nPlease feel free to browse ",(0,o.kt)("a",{parentName:"p",href:"/shimmer/wallet.rs/how_tos/more_examples"},"more examples")," which may suit your requirements.")))}s.isMDXComponent=!0},49448:(e,n,t)=>{t.d(n,{ZP:()=>s});var a=t(87462),o=(t(67294),t(3905));const i={toc:[]};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Online Faucet",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can request test funds from the ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.testnet.shimmer.network/"},"Shimmer Testnet Faucet"),".")))}s.isMDXComponent=!0},73479:(e,n,t)=>{t.d(n,{ZP:()=>s});var a=t(87462),o=(t(67294),t(3905));const i={toc:[]};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Dotenv",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"This example uses dotenv, which is not safe for use in production environments.")))}s.isMDXComponent=!0},93428:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>C,contentTitle:()=>T,default:()=>Z,frontMatter:()=>_,metadata:()=>N,toc:()=>I});var a=t(87462),o=(t(67294),t(3905)),i=t(34259),s=t(18679),c=t(69319);const r={toc:[]};function l(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(c.Z,{className:"language-typescript",mdxType:"CodeBlock"},"/**\n * This example mints native tokens\n */\nconst getUnlockedManager = require('./account-manager');\n\nasync function run() {\n    try {\n        const manager = await getUnlockedManager();\n\n        const account = await manager.getAccount('0');\n\n        await account.sync();\n\n        // First create an alias output, this needs to be done only once, because an alias can have many foundry outputs.\n        let tx = await account.createAliasOutput()\n        console.log('Transaction ID: ', tx.transactionId);\n\n        // Wait for transaction inclusion\n        await new Promise(resolve => setTimeout(resolve, 5000));\n\n        await account.sync();\n\n        // If we omit the AccountAddress field the first address of the account is used by default\n        const nativeTokenOptions = {\n            // Hello in bytes\n            foundryMetadata: '0x48656c6c6f',\n            circulatingSupply: '0x64',\n            maximumSupply: '0x64',\n        };\n\n        let { transaction } = await account.mintNativeToken(\n            nativeTokenOptions,\n        );\n        console.log('Transaction ID: ', transaction.transactionId);\n    } catch (error) {\n        console.log('Error: ', error);\n    }\n    process.exit(0);\n}\n\nrun();\n"),(0,o.kt)("p",null,"You can run the example by running the following command from the ",(0,o.kt)("inlineCode",{parentName:"p"},"bindings/node/examples/")," folder:"),(0,o.kt)(c.Z,{className:"language-bash",mdxType:"CodeBlock"},"node 22-mint-native-tokens.js"))}l.isMDXComponent=!0;const d={toc:[]};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"Transaction ID:  0x4cd9cca67165b3ae5160e5b3bad5a677d93140e3692c378ed5c661160e37ce09\n")))}u.isMDXComponent=!0;var p=t(53855);const m={toc:[]};function b(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(c.Z,{className:"java",mdxType:"CodeBlock"},'// Copyright 2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport org.iota.Wallet;\nimport org.iota.types.*;\nimport org.iota.types.account_methods.SyncAccount;\nimport org.iota.types.exceptions.WalletException;\nimport org.iota.types.ids.TokenId;\nimport org.iota.types.ids.account.AccountAlias;\nimport org.iota.types.secret.StrongholdSecretManager;\n\npublic class MintNativeToken {\n    public static void main(String[] args) throws WalletException, InterruptedException {\n        // This example assumes that a wallet has already been created using the \xb4CreateWallet.java\xb4 example.\n        // If you have not run the \xb4CreateAccount.java\xb4 example yet, run it first to ensure that the wallet can be loaded correctly.\n        Wallet wallet = new Wallet(new WalletConfig()\n                .withClientOptions(new ClientConfig().withNodes("https://api.testnet.shimmer.network"))\n                .withSecretManager(new StrongholdSecretManager("PASSWORD_FOR_ENCRYPTION", null, "example-wallet"))\n                .withCoinType(CoinType.Shimmer)\n        );\n\n        // Get account and sync it with the registered node to ensure that its balances are up-to-date.\n        AccountHandle a = wallet.getAccount(new AccountAlias("Alice"));\n        a.syncAccount(new SyncAccount().withOptions(new SyncOptions()));\n\n        // Fund the account for this example.\n        ExampleUtils.fundAccount(a);\n\n        // TODO: replace with your own values.\n        NativeTokenOptions options = new NativeTokenOptions();\n        options.withCirculatingSupply("0x20"); // number 23 hex encoded\n        options.withMaximumSupply("0x45"); // number 69 hex encoded\n\n        // Send transaction.\n        MintTokenTransaction t = a.mintNativeToken(new org.iota.types.account_methods.MintNativeToken().withNativeTokenOptions(options));\n\n        // Print transaction.\n        System.out.println(t);\n    }\n\n}'))}b.isMDXComponent=!0;const f={toc:[]};function k(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "tokenId":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0800000000",\n  "transaction":{\n    "payload":{\n      "type":6,\n      "essence":{\n        "type":1,\n        "networkId":"8342982141227064571",\n        "inputs":[\n          {\n            "type":0,\n            "transactionId":"0x5cf6c0b12f8799cda57e0579a18fcba76722db9bb9b5d10e459489d391b1937a",\n            "transactionOutputIndex":0\n          },\n          {\n            "type":0,\n            "transactionId":"0x5cf6c0b12f8799cda57e0579a18fcba76722db9bb9b5d10e459489d391b1937a",\n            "transactionOutputIndex":2\n          }\n        ],\n        "inputsCommitment":"0xd4f7b69a209e311e525e488c41a6b77ecc895f90ffdd1832ba31556f453fdd18",\n        "outputs":[\n          {\n            "type":4,\n            "amount":"50300",\n            "aliasId":"0x429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef",\n            "stateIndex":13,\n            "stateMetadata":"0x",\n            "foundriesCounter":0,\n            "unlockConditions":[\n              {\n                "type":4,\n                "address":{\n                  "type":0,\n                  "pubKeyHash":"0x4cfde0600797ae07d19d67d78910e70950bfdaf716f0035e9a30b97828aaf6a2"\n                }\n              },\n              {\n                "type":5,\n                "address":{\n                  "type":0,\n                  "pubKeyHash":"0x4cfde0600797ae07d19d67d78910e70950bfdaf716f0035e9a30b97828aaf6a2"\n                }\n              }\n            ]\n          },\n          {\n            "type":5,\n            "amount":"52800",\n            "serialNumber":8,\n            "tokenScheme":{\n              "type":0,\n              "mintedTokens":"0x20",\n              "meltedTokens":"0x0",\n              "maximumSupply":"0x45"\n            },\n            "unlockConditions":[\n              {\n                "type":6,\n                "address":{\n                  "type":8,\n                  "aliasId":"0x429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef"\n                }\n              }\n            ]\n          },\n          {\n            "type":3,\n            "amount":"2096320100",\n            "nativeTokens":[\n              {\n                "id":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0100000000",\n                "amount":"0x3233"\n              },\n              {\n                "id":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0200000000",\n                "amount":"0x3233"\n              },\n              {\n                "id":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0400000000",\n                "amount":"0x17"\n              },\n              {\n                "id":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0600000000",\n                "amount":"0x20"\n              },\n              {\n                "id":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0700000000",\n                "amount":"0x20"\n              },\n              {\n                "id":"0x08429fe5864378ce70699fc2d22bb144cb86a3c4833d136e3b95c5dadfd6ba0cef0800000000",\n                "amount":"0x20"\n              }\n            ],\n            "unlockConditions":[\n              {\n                "type":0,\n                "address":{\n                  "type":0,\n                  "pubKeyHash":"0x4cfde0600797ae07d19d67d78910e70950bfdaf716f0035e9a30b97828aaf6a2"\n                }\n              }\n            ]\n          }\n        ]\n      },\n      "unlocks":[\n        {\n          "type":0,\n          "signature":{\n            "type":0,\n            "publicKey":"0xde3152ce9d67415b9c5a042ea01caccc3f73ff1c0c77036874cb8badf9798d56",\n            "signature":"0x3c86bda5fd4e4f871a14920f7e630ec0cb8cbe7ccec03637441916b443a44c01ddc927459b6d20613025bd2a9e7f5afafd9cf1b2dbc979b128c6459de26da905"\n          }\n        },\n        {\n          "type":1,\n          "reference":0\n        }\n      ]\n    },\n    "blockId":"0xccde79f09a527c755f8cc78132543e58e1a100b19efc2a2ab5acc6525cd660f2",\n    "inclusionState":"Pending",\n    "timestamp":"1664896472744",\n    "transactionId":"0xf323167737a556fcfcfa9da0248fc39aa344c275484a6f224769d2379ca49352",\n    "networkId":"8342982141227064571",\n    "incoming":false\n  }\n}\n')))}k.isMDXComponent=!0;var h=t(73479);const y={toc:[{value:"Run the Example",id:"run-the-example",level:3}]};function v(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(h.ZP,{mdxType:"DotEnvWarning"}),(0,o.kt)(c.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example mint_native_token --release\n// In this example we will mint a native token\n// Rename `.env.example` to `.env` first\n\nuse std::env;\n\nuse dotenv::dotenv;\nuse iota_wallet::{account_manager::AccountManager, NativeTokenOptions, Result, U256};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // This example uses dotenv, which is not safe for use in production\n    dotenv().ok();\n\n    // Create the account manager\n    let manager = AccountManager::builder().finish().await?;\n\n    // Get the account we generated with `01_create_wallet`\n    let account = manager.get_account("Alice").await?;\n\n    account.sync(None).await?;\n\n    // Set the stronghold password\n    manager\n        .set_stronghold_password(&env::var("STRONGHOLD_PASSWORD").unwrap())\n        .await?;\n\n    // First create an alias output, this needs to be done only once, because an alias can have many foundry outputs\n    let transaction = account.create_alias_output(None, None).await?;\n    println!(\n        "Transaction: {} Block sent: {}/api/core/v2/blocks/{}",\n        transaction.transaction_id,\n        &env::var("NODE_URL").unwrap(),\n        transaction.block_id.expect("no block created yet")\n    );\n\n    // Wait for transaction to get included\n    account\n        .retry_until_included(&transaction.block_id.expect("no block created yet"), None, None)\n        .await?;\n\n    account.sync(None).await?;\n\n    let native_token_options = NativeTokenOptions {\n        alias_id: None,\n        circulating_supply: U256::from(100),\n        maximum_supply: U256::from(100),\n        foundry_metadata: None,\n    };\n\n    let transaction = account.mint_native_token(native_token_options, None).await?;\n    println!(\n        "Transaction: {} Block sent: {}/api/core/v2/blocks/{}",\n        transaction.transaction.transaction_id,\n        &env::var("NODE_URL").unwrap(),\n        transaction.transaction.block_id.expect("no block created yet")\n    );\n    Ok(())\n}\n'),(0,o.kt)("h3",{id:"run-the-example"},"Run the Example"),(0,o.kt)("p",null,"Run the example by running the following command:"),(0,o.kt)(c.Z,{className:"language-bash",mdxType:"CodeBlock"},"cargo run --example mint_native_token --release"))}v.isMDXComponent=!0;const x={toc:[]};function w(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"Transaction: 0xaa9737fb4007e8b0f4c181d6923b0e3547ae178c23c25233985bb22f61c84de7 \nBlock sent: http://localhost:14265/api/core/v2/blocks/0x807dbdde107008dcc9acae29a0e32c261590bef13e5f5d8d3bb60949e633abd8\n")))}w.isMDXComponent=!0;var g=t(49448);const _={title:"Mint Native Tokens",sidebar_label:"Mint",description:"How to mint native tokens using wallet.rs.",image:"/img/logo/iota_mark_light.png",keywords:["how to","mint native tokens","mint","nodejs","python","java","rust"]},T=void 0,N={unversionedId:"how_tos/native_tokens/mint_native_token",id:"how_tos/native_tokens/mint_native_token",title:"Mint Native Tokens",description:"How to mint native tokens using wallet.rs.",source:"@site/shimmer/external/wallet.rs/documentation/docs/how_tos/native_tokens/01_mint_native_token.mdx",sourceDirName:"how_tos/native_tokens",slug:"/how_tos/native_tokens/mint_native_token",permalink:"/shimmer/wallet.rs/how_tos/native_tokens/mint_native_token",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/shimmer/external/wallet.rs/documentation/docs/how_tos/native_tokens/01_mint_native_token.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Mint Native Tokens",sidebar_label:"Mint",description:"How to mint native tokens using wallet.rs.",image:"/img/logo/iota_mark_light.png",keywords:["how to","mint native tokens","mint","nodejs","python","java","rust"]},sidebar:"docs",previous:{title:"Destroy an Alias Output",permalink:"/shimmer/wallet.rs/how_tos/outputs_and_transactions/destroy_alias_output"},next:{title:"Send",permalink:"/shimmer/wallet.rs/how_tos/native_tokens/send_native_token"}},C={},I=[{value:"Code Example",id:"code-example",level:2},{value:"Expected Output",id:"expected-output",level:2}],M={toc:I};function Z(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},M,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can use a node running the stardust update to mint\n",(0,o.kt)("a",{parentName:"p",href:"https://wiki.iota.org/shimmer/introduction/explanations/what_is_stardust/tokenization#native-tokens"},"native tokens"),".\nTo do so, you will only need to ",(0,o.kt)("a",{parentName:"p",href:"/shimmer/wallet.rs/how_tos/accounts_and_addresses/request_funds"},"add some funds to your account"),", define\nthe native token's options and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"Account.mint_native_token(native_token_options, options)")," function."),(0,o.kt)(g.ZP,{mdxType:"TipFaucet"}),(0,o.kt)("h2",{id:"code-example"},"Code Example"),(0,o.kt)("p",null,"The following example will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create an account manager."),(0,o.kt)("li",{parentName:"ol"},"Get Alice's which was ",(0,o.kt)("a",{parentName:"li",href:"/shimmer/wallet.rs/how_tos/accounts_and_addresses/create_a_wallet_account"},"created in the first guide"),"."),(0,o.kt)("li",{parentName:"ol"},"Create the ",(0,o.kt)("inlineCode",{parentName:"li"},"NativeTokenOptions"),"."),(0,o.kt)("li",{parentName:"ol"},"Mint the native token by calling the ",(0,o.kt)("inlineCode",{parentName:"li"},"Account.mint_native_token(native_token_options, options)")," function.")),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,o.kt)(v,{mdxType:"RustCode"})),(0,o.kt)(s.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,o.kt)(l,{mdxType:"NodejsCode"})),(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(p.ZP,{mdxType:"PythonCode"})),(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(b,{mdxType:"JavaCode"}))),(0,o.kt)("h2",{id:"expected-output"},"Expected Output"),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,o.kt)(w,{mdxType:"RustOutput"})),(0,o.kt)(s.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,o.kt)(u,{mdxType:"NodejsOutput"})),(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(p.ZP,{mdxType:"PythonOutput"})),(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(k,{mdxType:"JavaOutput"}))))}Z.isMDXComponent=!0},18679:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(67294),o=t(86010);const i="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,s),hidden:t},n)}},34259:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),o=t(67294),i=t(86010),s=t(51048),c=t(33609),r=t(1943),l=t(72957);const d="tabList__CuJ",u="tabItem_LNqP";function p(e){var n;const{lazy:t,block:s,defaultValue:p,values:m,groupId:b,className:f}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??k.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,c.l)(h,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===p?p:p??(null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)??k[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:x,setTabGroupChoices:w}=(0,r.U)(),[g,_]=(0,o.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:N}=(0,l.o5)();if(null!=b){const e=x[b];null!=e&&e!==g&&h.some((n=>n.value===e))&&_(e)}const C=e=>{const n=e.currentTarget,t=T.indexOf(n),a=h[t].value;a!==g&&(N(n),_(a),null!=b&&w(b,String(a)))},I=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},f)},h.map((e=>{let{value:n,label:t,attributes:s}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:g===n?0:-1,"aria-selected":g===n,key:n,ref:e=>T.push(e),onKeyDown:I,onFocus:C,onClick:C},s,{className:(0,i.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":g===n})}),t??n)}))),t?(0,o.cloneElement)(k.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==g})))))}function m(e){const n=(0,s.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}}}]);