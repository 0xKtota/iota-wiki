"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[32997],{26205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var i=n(87462),o=(n(67294),n(3905)),r=n(44393);const a={title:"How To Prepare And Sign A Transaction"},s=void 0,c={unversionedId:"libraries/java/how_to/prepare_sign_transaction",id:"libraries/java/how_to/prepare_sign_transaction",title:"How To Prepare And Sign A Transaction",description:"",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/java/how_to/prepare_sign_transaction.mdx",sourceDirName:"libraries/java/how_to",slug:"/libraries/java/how_to/prepare_sign_transaction",permalink:"/iota.rs/develop/libraries/java/how_to/prepare_sign_transaction",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/java/how_to/prepare_sign_transaction.mdx",tags:[],version:"current",frontMatter:{title:"How To Prepare And Sign A Transaction"}},l={},p=[],d={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package node_api_core;\n\nimport org.iota.Client;\nimport org.iota.types.Block;\nimport org.iota.types.ClientConfig;\nimport org.iota.types.ClientException;\nimport org.iota.types.ids.BlockId;\nimport org.iota.types.secret.*;\n\nimport java.util.Map;\n\npublic class PrepareAndSignTransaction {\n    public static void main(String[] args) throws ClientException {\n        // Build the client.\n        Client client = new Client(new ClientConfig().withNodes(new String[]{"https://api.testnet.shimmer.network"}));\n\n        // Build the secret manager.\n        // NOTE: `YOUR_SECRET_MNEMONIC` serves  as a placeholder. Replace it with the mnemonic you want to use to sign the transaction.\n        SecretManager secretManager = new MnemonicSecretManager("YOUR_SECRET_MNEMONIC");\n\n        // Build the output for the transaction.\n        String receiverAddress = client.generateAddresses(secretManager, new GenerateAddressesOptions().withRange(new Range(0, 1)))[0];\n        BuildBlockOptions.ClientBlockBuilderOutputAddress output = new BuildBlockOptions.ClientBlockBuilderOutputAddress(receiverAddress, Integer.toString(1000000));\n\n        // Build block.\n        Map.Entry<BlockId, Block> b = client.buildAndPostBlock(secretManager, new BuildBlockOptions());\n\n        // Print the block ID.\n        System.out.println(b.getKey());\n    }\n}'))}u.isMDXComponent=!0}}]);