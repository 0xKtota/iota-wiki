"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[52772],{17161:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return p},default:function(){return v},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return f}});var i=t(87462),a=t(63366),r=(t(67294),t(3905)),l=t(31137),o=t(71871),s=t(18431),d=t(8813),c=["components"],u={title:"Create a Verifiable Credential",sidebar_label:"Create and Sign",description:"Explain how a VC is created and verified",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","Create","sign"]},p=void 0,m={unversionedId:"verifiable_credentials/create",id:"verifiable_credentials/create",isDocsHomePage:!1,title:"Create a Verifiable Credential",description:"Explain how a VC is created and verified",source:"@site/external/identity.rs/documentation/docs/verifiable_credentials/create.mdx",sourceDirName:"verifiable_credentials",slug:"/verifiable_credentials/create",permalink:"/identity.rs/verifiable_credentials/create",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/verifiable_credentials/create.mdx",tags:[],version:"current",frontMatter:{title:"Create a Verifiable Credential",sidebar_label:"Create and Sign",description:"Explain how a VC is created and verified",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","Create","sign"]},sidebar:"docs",previous:{title:"Overview",permalink:"/identity.rs/verifiable_credentials/overview"},next:{title:"Revocation",permalink:"/identity.rs/verifiable_credentials/revoke"}},f=[{value:"Example",id:"example",children:[{value:"Account Module (Recommended)",id:"account-module-recommended",children:[],level:3},{value:"Low-level API",id:"low-level-api",children:[],level:3}],level:2}],h={toc:f};function v(e){var n=e.components,t=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"TODO: Explain how a VC is created and verified."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"This example shows how you can create a Verifiable Credential and validate it. In this example, Alice takes the role of the subject, while we also have an issuer.\nThe issuer signs a UniversityDegreeCredential type verifiable credential with Alice's name and DID.\nThis Verifiable Credential can be verified by anyone, allowing Alice to take control of it and share it with anyone."),(0,r.kt)("h3",{id:"account-module-recommended"},"Account Module (Recommended)"),(0,r.kt)(s.Z,{className:"language-rust",mdxType:"CodeBlock"},d.Z),(0,r.kt)("h3",{id:"low-level-api"},"Low-level API"),(0,r.kt)(l.Z,{groupId:"programming-languages",defaultValue:"rust",values:[{label:"Rust",value:"rust"},{label:"Node.js",value:"nodejs"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! A basic example that generates and publishes subject and issuer DID\n//! Documents, then creates a Verifiable Credential (vc) specifying claims about the\n//! subject, and retrieves information through the CredentialValidator API.\n//!\n//! cargo run --example create_vc\n\nuse identity::credential::Credential;\nuse identity::iota::ClientMap;\nuse identity::iota::CredentialValidation;\nuse identity::iota::Receipt;\nuse identity::prelude::*;\n\nmod common;\nmod create_did;\n\npub async fn create_vc() -> Result<()> {\n  // Create a client instance to send messages to the Tangle.\n  let client: ClientMap = ClientMap::new();\n\n  // Create a signed DID Document/KeyPair for the credential issuer (see create_did.rs).\n  let (issuer_doc, issuer_key, _): (IotaDocument, KeyPair, Receipt) = create_did::run().await?;\n\n  // Create a signed DID Document/KeyPair for the credential subject (see create_did.rs).\n  let (subject_doc, _, _): (IotaDocument, KeyPair, Receipt) = create_did::run().await?;\n\n  // Create an unsigned Credential with claims about `subject` specified by `issuer`.\n  let mut credential: Credential = common::issue_degree(&issuer_doc, &subject_doc)?;\n\n  // Sign the Credential with the issuer\'s private key.\n  issuer_doc.sign_data(&mut credential, issuer_key.private())?;\n\n  println!("Credential JSON > {:#}", credential);\n\n  // Validate the verifiable credential\n  let validation: CredentialValidation = common::check_credential(&client, &credential).await?;\n  println!("Credential Validation > {:#?}", validation);\n  assert!(validation.verified);\n\n  Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  let _ = create_vc().await?;\n  Ok(())\n}\n')),(0,r.kt)(o.Z,{value:"nodejs",mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Client, Config, VerifiableCredential} from \'@iota/identity-wasm\';\nimport {createIdentity} from \'./create_did\';\nimport {manipulateIdentity} from \'./manipulate_did\';\n\n/**\n This example shows how to create a Verifiable Credential and validate it.\n In this example, alice takes the role of the subject, while we also have an issuer.\n The issuer signs a UniversityDegreeCredential type verifiable credential with Alice\'s name and DID.\n This Verifiable Credential can be verified by anyone, allowing Alice to take control of it and share it with whoever they please.\n\n @param {{defaultNodeURL: string, explorerURL: string, network: Network}} clientConfig\n **/\nasync function createVC(clientConfig) {\n    // Create a default client configuration from the parent config network.\n    const config = Config.fromNetwork(clientConfig.network);\n\n    // Create a client instance to publish messages to the Tangle.\n    const client = Client.fromConfig(config);\n\n    // Creates new identities (See "create_did" and "manipulate_did" examples)\n    const alice = await createIdentity(clientConfig);\n    const issuer = await manipulateIdentity(clientConfig);\n\n    // Prepare a credential subject indicating the degree earned by Alice\n    let credentialSubject = {\n        id: alice.doc.id.toString(),\n        name: "Alice",\n        degreeName: "Bachelor of Science and Arts",\n        degreeType: "BachelorDegree",\n        GPA: "4.0"\n    };\n\n    // Create an unsigned `UniversityDegree` credential for Alice\n    const unsignedVc = VerifiableCredential.extend({\n        id: "https://example.edu/credentials/3732",\n        type: "UniversityDegreeCredential",\n        issuer: issuer.doc.id.toString(),\n        credentialSubject,\n    });\n\n    // Sign the credential with the Issuer\'s newKey\n    const signedVc = issuer.doc.signCredential(unsignedVc, {\n        method: issuer.doc.id.toString() + "#newKey",\n        public: issuer.newKey.public,\n        private: issuer.newKey.private,\n    });\n\n    // Check if the credential is verifiable.\n    const result = await client.checkCredential(signedVc.toString());\n\n    console.log(`VC verification result: ${result.verified}`);\n\n    return {alice, issuer, signedVc};\n}\n\nexport {createVC};\n'))))}v.isMDXComponent=!0},71871:function(e,n,t){var i=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},31137:function(e,n,t){t.d(n,{Z:function(){return p}});var i=t(87462),a=t(67294),r=t(5730),l=t(54179);var o=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(3978),d=t(86010),c="tabItem_1uMI";function u(e){var n,t,i,r=e.lazy,l=e.block,u=e.defaultValue,p=e.values,m=e.groupId,f=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:h.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),g=(0,s.lx)(v,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===u?u:null!=(n=null!=u?u:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=h[0])?void 0:i.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=o(),C=b.tabGroupChoices,w=b.setTabGroupChoices,_=(0,a.useState)(y),k=_[0],D=_[1],I=[],x=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var T=C[m];null!=T&&T!==k&&v.some((function(e){return e.value===T}))&&D(T)}var S=function(e){var n=e.currentTarget,t=I.indexOf(n),i=v[t].value;i!==k&&(x(n),D(i),null!=m&&w(m,i))},V=function(e){var n,t=null;switch(e.key){case"ArrowRight":var i=I.indexOf(e.currentTarget)+1;t=I[i]||I[0];break;case"ArrowLeft":var a=I.indexOf(e.currentTarget)-1;t=I[a]||I[I.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":l},f)},v.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,className:(0,d.Z)("tabs__item",c,{"tabs__item--active":k===n}),key:n,ref:function(e){return I.push(e)},onKeyDown:V,onFocus:S,onClick:S},null!=t?t:n)}))),r?(0,a.cloneElement)(h.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function p(e){var n=(0,r.Z)();return a.createElement(u,(0,i.Z)({key:String(n)},e))}},54179:function(e,n,t){var i=(0,t(67294).createContext)(void 0);n.Z=i},8813:function(e,n){n.Z='// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example account_signing\n\nuse std::path::PathBuf;\n\nuse identity::account::Account;\nuse identity::account::AccountStorage;\nuse identity::account::IdentityCreate;\nuse identity::account::IdentityState;\nuse identity::account::Result;\nuse identity::core::json;\nuse identity::core::FromJson;\nuse identity::core::Url;\nuse identity::credential::Credential;\nuse identity::credential::Subject;\nuse identity::crypto::KeyPair;\nuse identity::did::DID;\nuse identity::iota::IotaDID;\nuse identity::iota::IotaDocument;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  pretty_env_logger::init();\n\n  // ===========================================================================\n  // Create Identity - Similar to create_did example\n  // ===========================================================================\n\n  // Stronghold settings\n  let stronghold_path: PathBuf = "./example-strong.hodl".into();\n  let password: String = "my-password".into();\n\n  // Create a new Account with the default configuration\n  let account: Account = Account::builder()\n    .storage(AccountStorage::Stronghold(stronghold_path, Some(password)))\n    .build()\n    .await?;\n\n  // Create a new Identity with default settings\n  //\n  // This step generates a keypair, creates an identity and publishes it to the IOTA mainnet.\n  let identity: IdentityState = account.create_identity(IdentityCreate::default()).await?;\n  let iota_did: &IotaDID = identity.try_did()?;\n\n  // ===========================================================================\n  // Signing Example\n  // ===========================================================================\n\n  // Add a new Ed25519 Verification Method to the identity\n  account\n    .update_identity(&iota_did)\n    .create_method()\n    .fragment("key-1")\n    .apply()\n    .await?;\n\n  // Create a subject DID for the recipient of a `UniversityDegree` credential.\n  let subject_key: KeyPair = KeyPair::new_ed25519()?;\n  let subject_did: IotaDID = IotaDID::new(subject_key.public().as_ref())?;\n\n  // Create the actual Verifiable Credential subject.\n  let subject: Subject = Subject::from_json_value(json!({\n    "id": subject_did.as_str(),\n    "degree": {\n      "type": "BachelorDegree",\n      "name": "Bachelor of Science and Arts"\n    }\n  }))?;\n\n  // Issue an unsigned Credential...\n  let mut credential: Credential = Credential::builder(Default::default())\n    .issuer(Url::parse(&iota_did.as_str())?)\n    .type_("UniversityDegreeCredential")\n    .subject(subject)\n    .build()?;\n\n  // ...and sign the Credential with the previously created Verification Method\n  account.sign(&iota_did, "key-1", &mut credential).await?;\n\n  println!("[Example] Local Credential = {:#}", credential);\n\n  // Fetch the DID Document from the Tangle\n  //\n  // This is an optional step to ensure DID Document consistency.\n  let resolved: IotaDocument = account.resolve_identity(&iota_did).await?;\n\n  // Prints the Identity Resolver Explorer URL, the entire history can be observed on this page by "Loading History".\n  println!(\n    "[Example] Explore the DID Document = {}{}",\n    iota_did.network()?.explorer_url().unwrap().to_string(),\n    iota_did.to_string()\n  );\n\n  // Ensure the resolved DID Document can verify the credential signature\n  let verified: bool = resolved.verify_data(&credential).is_ok();\n\n  println!("[Example] Credential Verified = {}", verified);\n\n  Ok(())\n}\n'}}]);