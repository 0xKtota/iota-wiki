"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[8622],{66334:function(e,n,t){t.d(n,{ZP:function(){return d}});var r=t(87462),s=t(63366),a=(t(67294),t(3905)),i=["components"],o={toc:[]};function d(e){var n=e.components,t=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"More advanced examples can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/tree/develop/examples"},"examples")," folder."))}d.isMDXComponent=!0},72650:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return m}});var r=t(87462),s=t(63366),a=(t(67294),t(3905)),i=t(87308),o=t(66334),d=["components"],c={title:"How To Generate Addresses"},u=void 0,l={unversionedId:"libraries/rust/how_to/generate_addresses",id:"libraries/rust/how_to/generate_addresses",title:"How To Generate Addresses",description:"Run it with",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/generate_addresses.mdx",sourceDirName:"libraries/rust/how_to",slug:"/libraries/rust/how_to/generate_addresses",permalink:"/iota.rs/develop/libraries/rust/how_to/generate_addresses",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/generate_addresses.mdx",tags:[],version:"current",frontMatter:{title:"How To Generate Addresses"},sidebar:"docs",previous:{title:"How To Generate A Mnemonic",permalink:"/iota.rs/develop/libraries/rust/how_to/generate_mnemonic"},next:{title:"How To Get An Output",permalink:"/iota.rs/develop/libraries/rust/how_to/get_output"}},p={},m=[],_={toc:m};function h(e){var n=e.components,t=(0,s.Z)(e,d);return(0,a.kt)("wrapper",(0,r.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example generate_addresses --release -- [NODE URL]\n\nuse iota_client::{\n    api::GetAddressesBuilder,\n    secret::{mnemonic::MnemonicSecretManager, SecretManager},\n    Client, Result,\n};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // This example uses dotenv, which is not safe for use in production\n    dotenv::dotenv().ok();\n\n    // Take the node URL from command line argument or use one from env as default.\n    let node_url = std::env::args()\n        .nth(1)\n        .unwrap_or_else(|| std::env::var("NODE_URL").unwrap());\n\n    // Create a client instance\n    let client = Client::builder()\n        .with_node(&node_url)? // Insert your node URL here\n        .with_node_sync_disabled()\n        .finish()?;\n\n    let secret_manager = SecretManager::Mnemonic(MnemonicSecretManager::try_from_mnemonic(\n        &std::env::var("NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1").unwrap(),\n    )?);\n\n    // Generate addresses with default account index and range\n    let addresses = client.get_addresses(&secret_manager).finish().await?;\n\n    println!("List of generated public addresses:\\n{addresses:#?}\\n");\n\n    // Generate addresses with custom account index and range\n    let addresses = client\n        .get_addresses(&secret_manager)\n        .with_account_index(0)\n        .with_range(0..4)\n        .finish()\n        .await?;\n\n    println!("List of generated public addresses:\\n{addresses:#?}\\n");\n\n    // Generating addresses with `client.get_addresses(&secret_manager)`, will by default get the bech32_hrp (Bech32\n    // human readable part) from the nodeinfo, generating it "offline" requires setting it with\n    // `with_bech32_hrp(bech32_hrp)`\n    let addresses = GetAddressesBuilder::new(&secret_manager)\n        .with_bech32_hrp(client.get_bech32_hrp().await?)\n        .with_account_index(0)\n        .with_range(0..4)\n        .finish()\n        .await?;\n\n    println!("List of offline generated public addresses:\\n{addresses:#?}\\n");\n\n    Ok(())\n}\n'),(0,a.kt)("p",null,"Run it with"),(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},"cargo run --example generate_addresses --release -- [NODE URL]"),(0,a.kt)(o.ZP,{mdxType:"MoreExamples"}))}h.isMDXComponent=!0}}]);