"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[2028],{22425:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return b}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={description:"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) which are referenced from smart contracts via their hashes.",image:"/img/logo/WASP_logo_dark.png",keywords:["core contracts","bloc","binary data","store","get","entry points","views","reference"]},c="The `blob` Contract",s={unversionedId:"guide/core_concepts/core_contracts/blob",id:"guide/core_concepts/core_contracts/blob",title:"The `blob` Contract",description:"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) which are referenced from smart contracts via their hashes.",source:"@site/content/build/wasp/develop/documentation/docs/guide/core_concepts/core_contracts/blob.md",sourceDirName:"guide/core_concepts/core_contracts",slug:"/guide/core_concepts/core_contracts/blob",permalink:"/smart-contracts/guide/core_concepts/core_contracts/blob",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/content/build/wasp/develop/documentation/docs/guide/core_concepts/core_contracts/blob.md",tags:[],version:"current",frontMatter:{description:"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) which are referenced from smart contracts via their hashes.",image:"/img/logo/WASP_logo_dark.png",keywords:["core contracts","bloc","binary data","store","get","entry points","views","reference"]},sidebar:"tutorialSidebar",previous:{title:"accounts",permalink:"/smart-contracts/guide/core_concepts/core_contracts/accounts"},next:{title:"The `blocklog` Contract",permalink:"/smart-contracts/guide/core_concepts/core_contracts/blocklog"}},p={},b=[{value:"Entry Points",id:"entry-points",level:2},{value:"- <code>storeBlob()</code>",id:"--storeblob",level:3},{value:"Views",id:"views",level:2},{value:"- <code>getBlobInfo(hash BlobHash)</code>",id:"--getblobinfohash-blobhash",level:3},{value:"- <code>getBlobField(hash BlobHash, field BlobField)</code>",id:"--getblobfieldhash-blobhash-field-blobfield",level:3},{value:"-<code>listBlobs()</code>",id:"-listblobs",level:3}],d={toc:b};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-blob-contract"},"The ",(0,o.kt)("inlineCode",{parentName:"h1"},"blob")," Contract"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"blob")," contract is one of the ",(0,o.kt)("a",{parentName:"p",href:"/smart-contracts/overview"},"core contracts")," on each IOTA Smart Contracts chain."),(0,o.kt)("p",null,"The function of the ",(0,o.kt)("inlineCode",{parentName:"p"},"blob")," contract is to maintain an on-chain registry of\n",(0,o.kt)("em",{parentName:"p"},"blobs"),", a collections of arbitrary binary data. Smart contracts reference ",(0,o.kt)("em",{parentName:"p"},"blobs")," via their hashes."),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"blob")," is a collection of named pieces of arbitrary binary data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<fieldName1> : <binaryChunk1>\n<fieldName2> : <binaryChunk2>\n...\n<fieldNameN> : <binaryChunkN>\n")),(0,o.kt)("p",null,"Here the ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldNameK")," is an arbitrary binary (a string) used as a name for the\nbinary data ",(0,o.kt)("inlineCode",{parentName:"p"},"binaryChunkK"),". Usually ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldNameK")," is not long. Its interpretation\nis use-case specific."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"binaryChunkK")," may be of arbitrary size (practical limits apply, of course)."),(0,o.kt)("p",null,"The order of the field-chunk pairs is essential because the hash of the blob depends on it."),(0,o.kt)("p",null,"The hash of the ",(0,o.kt)("em",{parentName:"p"},"blob")," is equal to the hash of concatenation of all pieces:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"blobHash = hash( fieldName1 || binaryChunk1 || fieldName2 || binaryChunk2 || ... || fieldNameN || binaryChunkN)\n")),(0,o.kt)("p",null,"There are two predefined field names which are interpreted by the VM while\ndeploying smart contracts from binary:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"fieldname")," = ",(0,o.kt)("inlineCode",{parentName:"li"},'"v"')," is interpreted as a ",(0,o.kt)("em",{parentName:"li"},"VM type")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"fieldname")," = ",(0,o.kt)("inlineCode",{parentName:"li"},'"p"')," is interpreted as a ",(0,o.kt)("em",{parentName:"li"},"smart contract program binary"))),(0,o.kt)("p",null,"If the field ",(0,o.kt)("inlineCode",{parentName:"p"},'"v"')," is equal to the string ",(0,o.kt)("inlineCode",{parentName:"p"},'"wasmtimevm"'),", the binary chunk\nof ",(0,o.kt)("inlineCode",{parentName:"p"},'"p"')," is interpreted as WebAssembly binary, loadable into the ",(0,o.kt)("em",{parentName:"p"},"Wasmtime"),"\nWasm VM."),(0,o.kt)("p",null,"Another use",(0,o.kt)("em",{parentName:"p"},"case for a _blob")," may be a full collection of self-described\nimmutable data of a smart contract program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"v" : VM type\n"p" : smart contract program binary\n"d" : data schema for data exchange between smart contract and outside sources and consumers\n"s" : program sources in .zip format\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"entry-points"},"Entry Points"),(0,o.kt)("p",null,"There is only one full entry point which allows us to submit a ",(0,o.kt)("em",{parentName:"p"},"blob")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"blob")," contract:"),(0,o.kt)("h3",{id:"--storeblob"},"- ",(0,o.kt)("inlineCode",{parentName:"h3"},"storeBlob()")),(0,o.kt)("p",null,"In the current implementation the data of the ",(0,o.kt)("em",{parentName:"p"},"blob")," is passed\nas parameters to the call of the entry point. It may be practically impossible\nto submit very large ",(0,o.kt)("em",{parentName:"p"},"blobs")," to the chain. In the future we plan to implement\na special mechanism which allows for the nodes to download big data chunks as\npart of the committee consensus."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"views"},"Views"),(0,o.kt)("h3",{id:"--getblobinfohash-blobhash"},"- ",(0,o.kt)("inlineCode",{parentName:"h3"},"getBlobInfo(hash BlobHash)")),(0,o.kt)("p",null,"Returns information about fields of the blob with specific hash and sizes of its data chunks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<fieldName1>: <size of the dataChunk1>\n...\n<fieldNameN>: <size of the dataChunkN>\n")),(0,o.kt)("h3",{id:"--getblobfieldhash-blobhash-field-blobfield"},"- ",(0,o.kt)("inlineCode",{parentName:"h3"},"getBlobField(hash BlobHash, field BlobField)")),(0,o.kt)("p",null,"Returns the data of the specified ",(0,o.kt)("em",{parentName:"p"},"blob")," field."),(0,o.kt)("h3",{id:"-listblobs"},"-",(0,o.kt)("inlineCode",{parentName:"h3"},"listBlobs()")),(0,o.kt)("p",null,"Returns a list of pairs ",(0,o.kt)("inlineCode",{parentName:"p"},"blob hash"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"total size of chunks")," for all blobs in the registry."))}m.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||b[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);