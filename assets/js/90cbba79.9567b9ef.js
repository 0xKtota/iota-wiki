"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[78368],{64028:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={description:"Getting started with the official IOTA Wallet Library Software Rust library.",image:"/img/logo/wallet_light.png",keywords:["Rust","install","cargo","system environment variables"]},l="Getting Started with Rust",c={unversionedId:"libraries/rust/getting_started",id:"libraries/rust/getting_started",title:"Getting Started with Rust",description:"Getting started with the official IOTA Wallet Library Software Rust library.",source:"@site/content/build/wallet.rs/develop/documentation/docs/libraries/rust/getting_started.md",sourceDirName:"libraries/rust",slug:"/libraries/rust/getting_started",permalink:"/wallet.rs/develop/libraries/rust/getting_started",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/content/build/wallet.rs/develop/documentation/docs/libraries/rust/getting_started.md",tags:[],version:"current",frontMatter:{description:"Getting started with the official IOTA Wallet Library Software Rust library.",image:"/img/logo/wallet_light.png",keywords:["Rust","install","cargo","system environment variables"]},sidebar:"docs",previous:{title:"IOTA Wallet Libraries",permalink:"/wallet.rs/develop/libraries/overview"},next:{title:"Examples",permalink:"/wallet.rs/develop/libraries/rust/examples"}},p={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Windows",id:"windows",level:3},{value:"macOS",id:"macos",level:3},{value:"Linux",id:"linux",level:3},{value:"Usage",id:"usage",level:2},{value:"Initialisation",id:"initialisation",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started-with-rust"},"Getting Started with Rust"),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null," ",(0,i.kt)("em",{parentName:"p"},"Rust")," and ",(0,i.kt)("em",{parentName:"p"},"Cargo")," are required to use wallet.rs. You can find installation instructions in the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/getting-started/installation.html"},"Rust documentation"),"."),(0,i.kt)("p",null,"We recommend you update ",(0,i.kt)("em",{parentName:"p"},"Rust")," to the latest stable version ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/rustup.rs#keeping-rust-up-to-date"},"rustup update stable"),". The nightly version should be fine, but there is a chance some changes are not compatible."),(0,i.kt)("h3",{id:"dependencies"},"Dependencies"),(0,i.kt)("p",null," ",(0,i.kt)("a",{parentName:"p",href:"https://cmake.org/documentation/"},(0,i.kt)("em",{parentName:"a"},"cmake"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://www.openssl.org/docs/"},(0,i.kt)("em",{parentName:"a"},"openssl"))," are required. In order to run the build process successfully using Cargo you may need install additional build tools on your system. "),(0,i.kt)("h3",{id:"windows"},"Windows"),(0,i.kt)("p",null," ",(0,i.kt)("em",{parentName:"p"},"cmake")," can be downloaded from the ",(0,i.kt)("a",{parentName:"p",href:"https://cmake.org/download/"},"official cmake website"),".\n",(0,i.kt)("em",{parentName:"p"},"openssl")," can be installed with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/vcpkg"},"vcpkg")," or ",(0,i.kt)("a",{parentName:"p",href:"https://chocolatey.org/"},"chocolatey"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Installing ",(0,i.kt)("em",{parentName:"p"},"openssl")," with ",(0,i.kt)("em",{parentName:"p"},"vcpkg")," :"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"./vcpkg.exe install openssl:x64-windows\n./vcpkg.exe integrate install\n# you may want to add this to the system environment variables since you'll need it to compile the crate\nset VCPKGRS_DYNAMIC=1\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Installing ",(0,i.kt)("em",{parentName:"p"},"openssl")," with ",(0,i.kt)("em",{parentName:"p"},"chocolatey")," :"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'choco install openssl\n# you may need to set the OPENSSL_ROOT_DIR environment variable\nset OPENSSL_ROOT_DIR="C:\\Program Files\\OpenSSL-Win64"\n')))),(0,i.kt)("h3",{id:"macos"},"macOS"),(0,i.kt)("p",null," ",(0,i.kt)("em",{parentName:"p"},"cmake")," and ",(0,i.kt)("em",{parentName:"p"},"openssl")," can be installed with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.brew.sh/"},(0,i.kt)("em",{parentName:"a"},"Homebrew"))," by running the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"brew install cmake\nbrew install openssl@1.1\n# you may want to add this to your .zshrc or .bashrc since you'll need it to compile the crate\nOPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1)\n")),(0,i.kt)("h3",{id:"linux"},"Linux"),(0,i.kt)("p",null,"You can install ",(0,i.kt)("em",{parentName:"p"},"cmake")," and ",(0,i.kt)("em",{parentName:"p"},"openssl")," with your distro's package manager or download from their websites. On Debian and Ubuntu you will also need the ",(0,i.kt)("a",{parentName:"p",href:"https://packages.debian.org/sid/build-essential"},(0,i.kt)("em",{parentName:"a"},"build-essential"))," package."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To use the library, add this to your ",(0,i.kt)("em",{parentName:"p"},"Cargo.toml")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'[dependencies]\niota-wallet = { git = "https://github.com/iotaledger/wallet.rs", branch = "develop" }\n')),(0,i.kt)("h3",{id:"initialisation"},"Initialisation"),(0,i.kt)("p",null,"In order to use the library, you first need to create an ",(0,i.kt)("em",{parentName:"p"},"AccountManager")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::path::PathBuf;\n\nuse iota_wallet::{\n    account_manager::AccountManager,\n    iota_client::constants::SHIMMER_COIN_TYPE,\n    secret::{stronghold::StrongholdSecretManager, SecretManager},\n    ClientOptions, Result,\n};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Shouldn\'t be hardcoded in production\n    // mnemonic can be generated with `manager.generate_mnemonic()?` and will be the only way to recover your funds if\n    // you loose the stronghold file/password, so be sure to save it securely\n    let nonsecure_use_of_development_mnemonic = "endorse answer radar about source reunion marriage tag sausage weekend frost daring base attack because joke dream slender leisure group reason prepare broken river".to_string();\n    let stronghold_password = "some_hopefully_secure_password";\n\n    // Setup Stronghold secret_manager\n    let mut secret_manager = StrongholdSecretManager::builder()\n        .password(&stronghold_password)\n        .snapshot_path(PathBuf::from("wallet.stronghold"))\n        .build();\n\n    // The mnemonic only needs to be stored the first time\n    secret_manager\n        .store_mnemonic(nonsecure_use_of_development_mnemonic)\n        .await?;\n\n    // Create the account manager with the secret_manager and client options\n    let client_options = ClientOptions::new().with_node("http://localhost:14265")?;\n\n    let manager = AccountManager::builder()\n        .with_secret_manager(SecretManager::Stronghold(secret_manager))\n        .with_client_options(client_options)\n        .with_coin_type(SHIMMER_COIN_TYPE)\n        .finish()\n        .await?;\n\n    // Create a new account, this will automatically generate an address\n    let account = manager\n        .create_account()\n        .with_alias("Alice".to_string())\n        .finish()\n        .await?;\n\n    println!(\n        "Generated a new account with addresses {:?}",\n        account.list_addresses().await?\n    );\n\n    Ok(())\n}\n')))}m.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);