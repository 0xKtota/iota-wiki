"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[95388],{58563:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var i=t(87462),a=t(63366),o=(t(67294),t(3905)),r=t(66816),d=t(71871),s=t(34369),l=["components"],u={title:"Update DID Documents",sidebar_label:"Update",description:"How DID Documents can be manipulated and how updates should be published",image:"/img/Identity_icon.png",keywords:["Documents","DID","Tangle","Update","Publish"]},c=void 0,p={unversionedId:"decentralized_identifiers/update",id:"decentralized_identifiers/update",isDocsHomePage:!1,title:"Update DID Documents",description:"How DID Documents can be manipulated and how updates should be published",source:"@site/external/identity.rs/documentation/docs/decentralized_identifiers/update.mdx",sourceDirName:"decentralized_identifiers",slug:"/decentralized_identifiers/update",permalink:"/identity.rs/decentralized_identifiers/update",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/decentralized_identifiers/update.mdx",tags:[],version:"current",frontMatter:{title:"Update DID Documents",sidebar_label:"Update",description:"How DID Documents can be manipulated and how updates should be published",image:"/img/Identity_icon.png",keywords:["Documents","DID","Tangle","Update","Publish"]},sidebar:"docs",previous:{title:"Create and Publish",permalink:"/identity.rs/decentralized_identifiers/create"},next:{title:"Secure",permalink:"/identity.rs/decentralized_identifiers/secure"}},m=[{value:"Example",id:"example",children:[{value:"Account Module (Recommended)",id:"account-module-recommended",children:[],level:3},{value:"Low-level API",id:"low-level-api",children:[],level:3}],level:2}],h={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TODO: Explain how DID Documents can be manipulated and how updates should be published."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"This example shows how you can add more to an existing DID Document. The two main things you can add are Verification Methods and Services. A verification method adds public keys, which can be used to digitally sign things like an identity. The services provide metadata around the identity via URIs. These can be URLs, but also emails or IOTA indices."),(0,o.kt)("h3",{id:"account-module-recommended"},"Account Module (Recommended)"),(0,o.kt)(s.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example account_manipulate\n\nuse std::path::PathBuf;\n\nuse identity::account::Account;\nuse identity::account::AccountStorage;\nuse identity::account::IdentitySetup;\nuse identity::account::Result;\nuse identity::core::Url;\nuse identity::did::MethodRelationship;\nuse identity::iota::IotaDID;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  pretty_env_logger::init();\n\n  // ===========================================================================\n  // Create Identity - Similar to create_did example\n  // ===========================================================================\n\n  // Stronghold settings\n  let stronghold_path: PathBuf = "./example-strong.hodl".into();\n  let password: String = "my-password".into();\n\n  // Create a new Account with the default configuration\n  let mut account: Account = Account::builder()\n    .storage(AccountStorage::Stronghold(stronghold_path, Some(password)))\n    .create_identity(IdentitySetup::default())\n    .await?;\n\n  // ===========================================================================\n  // Identity Manipulation\n  // ===========================================================================\n\n  // Add another Ed25519 verification method to the identity\n  account\n    .update_identity()\n    .create_method()\n    .fragment("my-next-key")\n    .apply()\n    .await?;\n\n  // Associate the newly created method with additional verification relationships\n  account\n    .update_identity()\n    .attach_method()\n    .fragment("my-next-key")\n    .relationship(MethodRelationship::CapabilityDelegation)\n    .relationship(MethodRelationship::CapabilityInvocation)\n    .apply()\n    .await?;\n\n  // Add a new service to the identity.\n  account\n    .update_identity()\n    .create_service()\n    .fragment("my-service-1")\n    .type_("MyCustomService")\n    .endpoint(Url::parse("https://example.com")?)\n    .apply()\n    .await?;\n\n  // Remove the Ed25519 verification method\n  account\n    .update_identity()\n    .delete_method()\n    .fragment("my-next-key")\n    .apply()\n    .await?;\n\n  // Retrieve the DID from the newly created identity.\n  let iota_did: &IotaDID = account.did();\n\n  // Prints the Identity Resolver Explorer URL.\n  // The entire history can be observed on this page by clicking "Loading History".\n  println!(\n    "[Example] Explore the DID Document = {}{}",\n    iota_did.network()?.explorer_url().unwrap().to_string(),\n    iota_did.to_string()\n  );\n  Ok(())\n}\n'),(0,o.kt)("h3",{id:"low-level-api"},"Low-level API"),(0,o.kt)(r.Z,{groupId:"programming-languages",defaultValue:"rust",values:[{label:"Rust",value:"rust"},{label:"Node.js",value:"nodejs"}],mdxType:"Tabs"},(0,o.kt)(d.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)(s.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! An example that demonstrates how to publish changes to the integration chain to update a\n//! DID Document.\n//!\n//! cargo run --example update_did\n\nuse identity::core::json;\nuse identity::core::FromJson;\nuse identity::core::Timestamp;\nuse identity::did::MethodScope;\nuse identity::did::Service;\nuse identity::did::DID;\nuse identity::iota::ClientMap;\nuse identity::iota::IotaVerificationMethod;\nuse identity::iota::Receipt;\nuse identity::iota::TangleRef;\nuse identity::prelude::*;\n\nmod create_did;\n\npub async fn run() -> Result<(IotaDocument, KeyPair, KeyPair, Receipt, Receipt)> {\n  // Create a client instance to send messages to the Tangle.\n  let client: ClientMap = ClientMap::new();\n\n  // Create a signed DID Document and KeyPair (see create_did.rs).\n  let (mut document, keypair, receipt): (IotaDocument, KeyPair, Receipt) = create_did::run().await?;\n\n  // Add a new VerificationMethod with a new keypair\n  let new_key: KeyPair = KeyPair::new_ed25519()?;\n  let method: IotaVerificationMethod =\n    IotaVerificationMethod::from_did(document.did().clone(), new_key.type_(), new_key.public(), "newKey")?;\n  assert!(document.insert_method(method, MethodScope::VerificationMethod));\n\n  // Add a new Service\n  let service: Service = Service::from_json_value(json!({\n    "id": document.id().to_url().join("#linked-domain")?,\n    "type": "LinkedDomains",\n    "serviceEndpoint": "https://iota.org"\n  }))?;\n  assert!(document.insert_service(service));\n\n  // Add the messageId of the previous message in the chain.\n  // This is REQUIRED in order for the messages to form a chain.\n  // Skipping / forgetting this will render the publication useless.\n  document.set_previous_message_id(*receipt.message_id());\n  document.set_updated(Timestamp::now_utc());\n\n  // Sign the DID Document with the original private key.\n  document.sign_self(keypair.private(), &document.default_signing_method()?.id())?;\n\n  // Publish the updated DID Document to the Tangle.\n  let update_receipt: Receipt = client.publish_document(&document).await?;\n\n  println!("Publish Receipt > {:#?}", update_receipt);\n\n  // Display the web explorer url that shows the published message.\n  println!("DID Document Transaction > {}", update_receipt.message_url()?);\n\n  Ok((document, keypair, new_key, receipt, update_receipt))\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  let _ = run().await?;\n  Ok(())\n}\n')),(0,o.kt)(d.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)(s.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Client, Config, KeyPair, KeyType, VerificationMethod, Service, Timestamp} from \'@iota/identity-wasm\';\nimport {createIdentity} from "./create_did";\nimport {logExplorerUrl} from "./utils";\n\n/**\n This example shows how to add more to an existing DID Document.\n The two main things to add are Verification Methods and Services.\n A verification method adds public keys, which can be used to digitally sign things as an identity.\n The services provide metadata around the identity via URIs. These can be URLs, but can also emails or IOTA indices.\n An important detail to note is the previousMessageId:\n This is an important field as it links the new DID Document to the old DID Document, creating a chain.\n Without setting this value, the new DID Document won\'t get used during resolution of the DID!\n\n @param {{defaultNodeURL: string, explorerURL: string, network: Network}} clientConfig\n **/\nasync function manipulateIdentity(clientConfig) {\n    // Create a default client configuration from the parent config network.\n    const config = Config.fromNetwork(clientConfig.network);\n\n    // Create a client instance to publish messages to the Tangle.\n    const client = Client.fromConfig(config);\n\n    // Creates a new identity (see "create_did" example)\n    let {key, doc, receipt} = await createIdentity(clientConfig);\n\n    // Add a new VerificationMethod with a new KeyPair\n    const newKey = new KeyPair(KeyType.Ed25519);\n    const method = VerificationMethod.fromDID(doc.id, newKey, "newKey");\n    doc.insertMethod(method, "VerificationMethod");\n\n    // Add a new ServiceEndpoint\n    const serviceJSON = {\n        id: doc.id + "#linked-domain",\n        type: "LinkedDomains",\n        serviceEndpoint: "https://iota.org",\n    };\n    doc.insertService(Service.fromJSON(serviceJSON));\n\n    /*\n        Add the messageId of the previous message in the chain.\n        This is REQUIRED in order for the messages to form a chain.\n        Skipping / forgetting this will render the publication useless.\n    */\n    doc.previousMessageId = receipt.messageId;\n    doc.updated = Timestamp.nowUTC();\n\n    // Sign the DID Document with the appropriate key.\n    doc.signSelf(key, doc.defaultSigningMethod().id.toString());\n\n    // Publish the Identity to the IOTA Network, this may take a few seconds to complete Proof-of-Work.\n    const updateReceipt = await client.publishDocument(doc);\n\n    // Log the results.\n    logExplorerUrl("Identity Update:", clientConfig.network.toString(), updateReceipt.messageId);\n    return {\n        key,\n        newKey,\n        doc,\n        originalMessageId: receipt.messageId,\n        updatedMessageId: updateReceipt.messageId,\n    };\n}\n\nexport {manipulateIdentity};\n'))))}f.isMDXComponent=!0},71871:function(e,n,t){var i=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},66816:function(e,n,t){t.d(n,{Z:function(){return p}});var i=t(87462),a=t(67294),o=t(5730),r=t(54179);var d=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(86881),l=t(86010),u="tabItem_1uMI";function c(e){var n,t,i,o=e.lazy,r=e.block,c=e.defaultValue,p=e.values,m=e.groupId,h=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=p?p:f.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),g=(0,s.lx)(y,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(n=null!=c?c:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=f[0])?void 0:i.props.value;if(null!==v&&!y.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=d(),D=w.tabGroupChoices,b=w.setTabGroupChoices,I=(0,a.useState)(v),k=I[0],_=I[1],T=[],x=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var S=D[m];null!=S&&S!==k&&y.some((function(e){return e.value===S}))&&_(S)}var C=function(e){var n=e.currentTarget,t=T.indexOf(n),i=y[t].value;i!==k&&(x(n),_(i),null!=m&&b(m,i))},R=function(e){var n,t=null;switch(e.key){case"ArrowRight":var i=T.indexOf(e.currentTarget)+1;t=T[i]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.currentTarget)-1;t=T[a]||T[T.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},h)},y.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,className:(0,l.Z)("tabs__item",u,{"tabs__item--active":k===n}),key:n,ref:function(e){return T.push(e)},onKeyDown:R,onFocus:C,onClick:C},null!=t?t:n)}))),o?(0,a.cloneElement)(f.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function p(e){var n=(0,o.Z)();return a.createElement(c,(0,i.Z)({key:String(n)},e))}},54179:function(e,n,t){var i=(0,t(67294).createContext)(void 0);n.Z=i}}]);