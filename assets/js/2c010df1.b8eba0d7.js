"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[88385],{51810:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],s={description:"Calling smart contract view functions with Solo.",image:"/img/tutorial/call_view.png",keywords:["testing","solo","views","call","synchronous","entry points"]},l="Calling a View",c={unversionedId:"guide/solo/view-sc",id:"guide/solo/view-sc",title:"Calling a View",description:"Calling smart contract view functions with Solo.",source:"@site/content/build/wasp/develop/documentation/docs/guide/solo/view-sc.md",sourceDirName:"guide/solo",slug:"/guide/solo/view-sc",permalink:"/smart-contracts/guide/solo/view-sc",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/content/build/wasp/develop/documentation/docs/guide/solo/view-sc.md",tags:[],version:"current",frontMatter:{description:"Calling smart contract view functions with Solo.",image:"/img/tutorial/call_view.png",keywords:["testing","solo","views","call","synchronous","entry points"]},sidebar:"tutorialSidebar",previous:{title:"Invoking Smart Contracts",permalink:"/smart-contracts/guide/solo/invoking-sc"},next:{title:"Error Handling",permalink:"/smart-contracts/guide/solo/error-handling"}},p={},d=[{value:"Decoding Results Returned by <em>PostRequestSync</em> and <em>CallView</em>",id:"decoding-results-returned-by-postrequestsync-and-callview",level:2}],u={toc:d};function m(e){var t=e.components,s=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"calling-a-view"},"Calling a View"),(0,o.kt)("p",null,"The following snippet shows how to call the view function ",(0,o.kt)("inlineCode",{parentName:"p"},"getString")," of the\nsmart contract ",(0,o.kt)("inlineCode",{parentName:"p"},"solotutorial")," without parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'res, err := chain.CallView("example1", "getString")\n')),(0,o.kt)("p",null,"The call returns both a collection of key/value pairs ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," and an error result\n",(0,o.kt)("inlineCode",{parentName:"p"},"err")," in the typical Go fashion."),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:n(53318).Z},(0,o.kt)("img",{alt:"Calling a view process",src:n(89951).Z,width:"862",height:"452"}))),(0,o.kt)("p",null,"The basic principle of calling a view is similar to sending a request to the\nsmart contract. The essential difference is that calling a view does not\nconstitute an asynchronous transaction; it is just a direct synchronous\ncall to the view entry point exposed by the smart contract."),(0,o.kt)("p",null,"Therefore, calling a view does not involve any token transfers.\nSending a request (either on-ledger or off-ledger) to a view entry point will result in an exception, returning all attached tokens to the sender (minus fees, if any)."),(0,o.kt)("p",null,"Views are used to retrieve information about the state of the smart contract, for example to display on a website.\nCertain Solo methods such as ",(0,o.kt)("inlineCode",{parentName:"p"},"chain.GetInfo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"chain.GetGasFeePolicy")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"chain.L2Assets")," call views of the core smart contracts behind the scenes to retrieve the information about the chain or a specific smart contract."),(0,o.kt)("h2",{id:"decoding-results-returned-by-postrequestsync-and-callview"},"Decoding Results Returned by ",(0,o.kt)("em",{parentName:"h2"},"PostRequestSync")," and ",(0,o.kt)("em",{parentName:"h2"},"CallView")),(0,o.kt)("p",null,"The following is a specific technicality of the Go environment of ",(0,o.kt)("em",{parentName:"p"},"Solo"),"."),(0,o.kt)("p",null,"The result returned by the call to an entry point from the Solo environment is an instance of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/kv/dict/dict.go"},(0,o.kt)("inlineCode",{parentName:"a"},"dict.Dict"))," type, which is essentially a map of ",(0,o.kt)("inlineCode",{parentName:"p"},"[]byte")," key/value pairs, defined as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Dict map[kv.Key][]byte\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Dict")," is also an implementation of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/kv/kv.go"},(0,o.kt)("inlineCode",{parentName:"a"},"kv.KVStore"))," interface. The ",(0,o.kt)("inlineCode",{parentName:"p"},"kv")," package and subpackages provide a lot of useful functions to work with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dict")," type."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Both view and non-view entry points can produce results.\nIn nomal operation, retrieving the result of an on-ledger request is impossible, since it is an asynchronous operation.\nHowever, in the Solo environment, the call to ",(0,o.kt)("inlineCode",{parentName:"p"},"PostRequestSync")," is synchronous, allowing the caller to inspect the result.\nThis is a convenient difference between the mocked Solo environment and the distributed ledger used by Wasp nodes.\nIt can be used to make assertions about the results of a call in the tests."))),(0,o.kt)("p",null,"In our example above, ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," is a dictionary where keys and values are binary slices.\nW know that the ",(0,o.kt)("inlineCode",{parentName:"p"},"getString")," view returns the value under the ",(0,o.kt)("inlineCode",{parentName:"p"},'"str"')," key, and the value is a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," encoded as a byte slice.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"codec")," package provides functions to encode/decode frequently used data types, including ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),".\nThe following is a commonly used pattern to get a value from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dict")," and decode it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var value string = codec.MustDecodeString(res["str"])\n')))}m.isMDXComponent=!0},53318:function(e,t,n){t.Z=n.p+"assets/files/call_view-199c30d7a223e75c2d43d7aa6ec08dde.png"},89951:function(e,t,n){t.Z=n.p+"assets/images/call_view-199c30d7a223e75c2d43d7aa6ec08dde.png"},3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);