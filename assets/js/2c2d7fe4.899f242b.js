"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[70401],{71448:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),s=t(87308),i=["components"],l={title:"Examples",description:"Official IOTA Wallet Library Software Node.js examples.",image:"/img/logo/wallet_light.png",keywords:["account","address","nodejs","dust protection","password","stronghold","Chrysalis"]},c=void 0,d={unversionedId:"libraries/nodejs/examples",id:"libraries/nodejs/examples",title:"Examples",description:"Official IOTA Wallet Library Software Node.js examples.",source:"@site/content/build/wallet.rs/develop/documentation/docs/libraries/nodejs/examples.mdx",sourceDirName:"libraries/nodejs",slug:"/libraries/nodejs/examples",permalink:"/wallet.rs/develop/libraries/nodejs/examples",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/content/build/wallet.rs/develop/documentation/docs/libraries/nodejs/examples.mdx",tags:[],version:"current",frontMatter:{title:"Examples",description:"Official IOTA Wallet Library Software Node.js examples.",image:"/img/logo/wallet_light.png",keywords:["account","address","nodejs","dust protection","password","stronghold","Chrysalis"]},sidebar:"docs",previous:{title:"Getting Started with Node.js",permalink:"/wallet.rs/develop/libraries/nodejs/getting_started"},next:{title:"Stardust Exchange Integration Guide",permalink:"/wallet.rs/develop/libraries/nodejs/exchange_guide"}},u={},p=[{value:"Create Wallet Example:",id:"create-wallet-example",level:2}],m={toc:p};function g(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can find the code for the examples in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/bindings/nodejs/examples")," folder in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/tree/develop/bindings/nodejs/examples"},"official GitHub repository"),"."),(0,r.kt)("p",null,"All the examples expect you to set your custom password  in the ",(0,r.kt)("em",{parentName:"p"},".env")," file and the first one also requires a mnemonic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'SH_PASSWORD="here is your super secure password"\nMNEMONIC="here your 24 word mnemonic, it is the only way to recover your account if you ever forget your password and/or lose the stronghold file"\n')),(0,r.kt)("h2",{id:"create-wallet-example"},"Create Wallet Example:"),(0,r.kt)("p",null,"Use the following example to generate a wallet with one account. "),(0,r.kt)(s.Z,{className:"language-javascript",mdxType:"CodeBlock"},"/**\n * This example creates a new database and account\n */\n\nrequire('dotenv').config();\nconst { CoinType } = require('../out/types');\nconst { AccountManager } = require('@iota/wallet');\n\nasync function run() {\n    try {\n        const manager = await createAccountManager();\n\n        // The coin type only needs to be set on the first account\n        const account = await manager.createAccount({\n            alias: 'Alice',\n        });\n        console.log('Account created:', account);\n\n        const secondAccount = await manager.createAccount({\n            alias: 'Bob',\n        });\n        console.log('Account created:', secondAccount);\n    } catch (error) {\n        console.log('Error: ' + error);\n    }\n    process.exit(0);\n}\n\nasync function createAccountManager() {\n    const accountManagerOptions = {\n        storagePath: './alice-database',\n        clientOptions: {\n            nodes: [\n                {\n                    url: 'https://firefly.h.chrysalis-devnet.iota.cafe/',\n                },\n            ],\n            localPow: true,\n        },\n        coinType: CoinType.Shimmer,\n        secretManager: {\n            Stronghold: {\n                snapshotPath: `./wallet.stronghold`,\n                password: `${process.env.SH_PASSWORD}`,\n            },\n        },\n    };\n\n    const manager = new AccountManager(accountManagerOptions);\n    await manager.storeMnemonic(process.env.MNEMONIC);\n    return manager;\n}\n\nrun();\n"))}g.isMDXComponent=!0}}]);