"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[78747],{69828:function(e,n,t){t.r(n),t.d(n,{assets:function(){return A},contentTitle:function(){return O},default:function(){return L},frontMatter:function(){return I},metadata:function(){return D},toc:function(){return Z}});var a=t(87462),s=t(63366),i=(t(67294),t(3905)),o=t(36232),r=t(84661),l=t(87308),d=t(94365),c=["components"],p=d.Z.indexOf("public static void simpleMessage"),u=d.Z.indexOf("public static void getMessageMetadata"),m=d.Z.substring(p,u),g={toc:[]};function f(e){var n=e.components,t=(0,s.Z)(e,c);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("a",{parentName:"p",href:"./../libraries/java/api_reference#message-clientmessagebuilder"},(0,i.kt)("inlineCode",{parentName:"a"},"Client.message()"))," to easily send any\nmessage over the network. Alternatively, there is a convenient\n",(0,i.kt)("a",{parentName:"p",href:"./../libraries/java/api_reference#messagebuilder"},"MessageSender")," helper class with chaining calls that prepares a message\ninstance and broadcasts it over the network."),(0,i.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},m),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-string"},"{\n  message: {\n    networkId: '14379272398717627559',\n    parentMessageIds: [\n      '03ddc83fad172a322fb00fb4e449436e9d1117ff390879100647c650a30c2d52',\n      '252798210fa9816f6fd40f1b19095da9f2dc88ae06fc4c0523a928a29d0d782e',\n      'a8e4f4cd49227068424ead8da187a48fdaa7ce8ffc4b9ac0ee2d5d3f2fcd7e70',\n      'dbbc8044bc624b3378e1dda83ab95f9be468b06a6a9806c76a70353182028cf9'\n    ],\n    payload: null,\n    nonce: '9223372036854784215'\n  },\n  messageId: '10dbee9cf3c58507725861b34ac711058dc13f709be1a6d21f1dc0af17b06379'\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"messageId")," is a unique id that refers to the given message in the network.")))}f.isMDXComponent=!0;var h="async function run() {\n    const { ClientBuilder } = require('@iota/client');\n\n    // client will connect to testnet by default\n    const client = new ClientBuilder().build();\n\n    const messageId = await client.message().submit();\n    console.log(messageId);\n}\n\nrun()\n",b=["components"],y={toc:[]};function k(e){var n=e.components,t=(0,s.Z)(e,b);return(0,i.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can use the function ",(0,i.kt)("a",{parentName:"p",href:"./../libraries/nodejs/api_reference#postmessagemessage-promise"},(0,i.kt)("inlineCode",{parentName:"a"},"Client.postMessage(message)"))," to send a message instance over a network. Alternatively, you can\nuse the ",(0,i.kt)("a",{parentName:"p",href:"./../libraries/nodejs/api_reference#messagesender"},(0,i.kt)("inlineCode",{parentName:"a"},"MessageSender"))," helper class with chaining calls that prepares a message instance and broadcasts it over the\nnetwork."),(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},h),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-string"},"{\n  message: {\n    networkId: '14379272398717627559',\n    parentMessageIds: [\n      '03ddc83fad172a322fb00fb4e449436e9d1117ff390879100647c650a30c2d52',\n      '252798210fa9816f6fd40f1b19095da9f2dc88ae06fc4c0523a928a29d0d782e',\n      'a8e4f4cd49227068424ead8da187a48fdaa7ce8ffc4b9ac0ee2d5d3f2fcd7e70',\n      'dbbc8044bc624b3378e1dda83ab95f9be468b06a6a9806c76a70353182028cf9'\n    ],\n    payload: null,\n    nonce: '9223372036854784215'\n  },\n  messageId: '10dbee9cf3c58507725861b34ac711058dc13f709be1a6d21f1dc0af17b06379'\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"messageId")," is a unique id that refers to the given message in the network.")))}k.isMDXComponent=!0;var v=["components"],_={toc:[]};function w(e){var n=e.components,t=(0,s.Z)(e,v);return(0,i.kt)("wrapper",(0,a.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can use the\n",(0,i.kt)("a",{parentName:"p",href:"./../libraries/python/api_reference#messageseed-optional-account_index-optional-initial_address_index-optional-inputs-optional-input_range_begin-optional-input_range_end-optional-outputs-optional-dust_allowance_outputs-optional-index-optional-index_raw-optional-data-optional-data_str-optional-parents-optional-message"},(0,i.kt)("inlineCode",{parentName:"a"},"Client.message()")),"\nfunction to prepare a message instance and send it over a network. It accepts wide range of input parameters and can\nhelp with any kind of message type you want to broadcast."),(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"import iota_client\nclient = iota_client.Client()\n\nmessage = client.message()\nprint(message)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-string"},'{\n   "message_id":"e2daa4c6b012b615becd6c12189b2c9e701ba0d53b31a15425b21af5105fc086",\n   "network_id":7712883261355838377,\n   "parents":[\n      "0e2705ce50fec88f896663d4b7d562e74cbcfdd951ac482b1f03cfa5f27396d7",\n      "0f5a0b2041766127c3f3bff2dd653b450b72e364765fcc805a40423c59ed01f9",\n      "20635b30aee437575d7e6abdf6629eec80543bee30848b0abdda2200fc11a977",\n      "da97cd6cfcbb854b8fd3f064c8459c5c9eae80dbd5ef594a3e1a26dcb8fc078c"\n   ],\n   "payload":"None",\n   "nonce":2305843009213869242\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"message_id")," is a unique id that refers to the given message in the network."),(0,i.kt)("li",{parentName:"ul"},"Every message in the Tangle should refer to up to 8 other messages. These are indicated in the ",(0,i.kt)("inlineCode",{parentName:"li"},"parents")," section."),(0,i.kt)("li",{parentName:"ul"},"No actual ",(0,i.kt)("inlineCode",{parentName:"li"},"payload")," was given in this example message (",(0,i.kt)("inlineCode",{parentName:"li"},"payload=None"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nonce")," refer to a result of proof-of-work.")))}w.isMDXComponent=!0;var x=["components"],S={toc:[]};function E(e){var n=e.components,t=(0,s.Z)(e,x);return(0,i.kt)("wrapper",(0,a.Z)({},S,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The function\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/iota-client/latest/iota_client/client/struct.Client.html#method.post_message"},(0,i.kt)("inlineCode",{parentName:"a"},"Client.postMessage( message: &Message)")),"\naccepts a message instance as a parameter and sends it over a network."),(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 06_simple_message --release\n\nuse iota_client::{Client, Result};\n\n/// In this example we will send a message without a payload\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n        .finish()\n        .await?;\n\n    let message = iota.message().finish().await?;\n\n    println!(\n        "Empty message sent: https://explorer.iota.org/devnet/message/{}",\n        message.id().0\n    );\n    Ok(())\n}\n'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-string"},"{\n  message: {\n    networkId: '14379272398717627559',\n    parentMessageIds: [\n      '03ddc83fad172a322fb00fb4e449436e9d1117ff390879100647c650a30c2d52',\n      '252798210fa9816f6fd40f1b19095da9f2dc88ae06fc4c0523a928a29d0d782e',\n      'a8e4f4cd49227068424ead8da187a48fdaa7ce8ffc4b9ac0ee2d5d3f2fcd7e70',\n      'dbbc8044bc624b3378e1dda83ab95f9be468b06a6a9806c76a70353182028cf9'\n    ],\n    payload: null,\n    nonce: '9223372036854784215'\n  },\n  messageId: '10dbee9cf3c58507725861b34ac711058dc13f709be1a6d21f1dc0af17b06379'\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"messageId")," is a unique id that refers to the given message in the network.")))}E.isMDXComponent=!0;var N=["components"],M={toc:[]};function T(e){var n=e.components,t=(0,s.Z)(e,N);return(0,i.kt)("wrapper",(0,a.Z)({},M,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The function ",(0,i.kt)("a",{parentName:"p",href:"./../libraries/wasm/api_reference#clientpostmessagemessage--promiseany"},(0,i.kt)("inlineCode",{parentName:"a"},"Client.postMessage(message)")),"\naccepts a message instance as a parameter and sends it over a network. Alternatively, there is a convenient\n",(0,i.kt)("a",{parentName:"p",href:"./../libraries/wasm/api_reference#messagebuilder"},"MessageBuilder")," helper class with chaining calls that prepares a\nmessage instance and broadcasts it over the network."),(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},h),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-string"},"{\n  message: {\n    networkId: '14379272398717627559',\n    parentMessageIds: [\n      '03ddc83fad172a322fb00fb4e449436e9d1117ff390879100647c650a30c2d52',\n      '252798210fa9816f6fd40f1b19095da9f2dc88ae06fc4c0523a928a29d0d782e',\n      'a8e4f4cd49227068424ead8da187a48fdaa7ce8ffc4b9ac0ee2d5d3f2fcd7e70',\n      'dbbc8044bc624b3378e1dda83ab95f9be468b06a6a9806c76a70353182028cf9'\n    ],\n    payload: null,\n    nonce: '9223372036854784215'\n  },\n  messageId: '10dbee9cf3c58507725861b34ac711058dc13f709be1a6d21f1dc0af17b06379'\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"messageId")," is a unique id that refers to the given message in the network.")))}T.isMDXComponent=!0;var C=["components"],I={title:"Post a Message",description:"You can use the function Client.postMessage(message) to send a message instance over a network.",image:"/img/logo/iota_mark_light.png",keywords:["how to","message","encapsulating data structure","network","java","nodejs","python","wasm","rust"]},O=void 0,D={unversionedId:"examples/simple_message",id:"examples/simple_message",title:"Post a Message",description:"You can use the function Client.postMessage(message) to send a message instance over a network.",source:"@site/content/build/iota.rs/production/documentation/docs/examples/simple_message.mdx",sourceDirName:"examples",slug:"/examples/simple_message",permalink:"/iota.rs/examples/simple_message",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/production/documentation/content/build/iota.rs/production/documentation/docs/examples/simple_message.mdx",tags:[],version:"current",frontMatter:{title:"Post a Message",description:"You can use the function Client.postMessage(message) to send a message instance over a network.",image:"/img/logo/iota_mark_light.png",keywords:["how to","message","encapsulating data structure","network","java","nodejs","python","wasm","rust"]},sidebar:"docs",previous:{title:"Get Outputs",permalink:"/iota.rs/examples/get_outputs"},next:{title:"Get Message Data",permalink:"/iota.rs/examples/get_message_data"}},A={},Z=[{value:"Messages",id:"messages",level:2}],j={toc:Z};function L(e){var n=e.components,t=(0,s.Z)(e,C);return(0,i.kt)("wrapper",(0,a.Z)({},j,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"messages"},"Messages"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"../explanations/messages_payloads_and_transactions#messages"},"message")," is an encapsulating data structure that is being actually broadcast across the network. It is an atomic unit that is either accepted or rejected as a whole."),(0,i.kt)("p",null,"The simplest message you can broadcast is a message without any particular payload, as shown in the following examples."),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(f,{mdxType:"JavaSimpleMessage"})),(0,i.kt)(r.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,i.kt)(k,{mdxType:"NodejsSimpleMessage"})),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(w,{mdxType:"PythonSimpleMessage"})),(0,i.kt)(r.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,i.kt)(E,{mdxType:"RustSimpleMessage"})),(0,i.kt)(r.Z,{value:"wasm",label:"Wasm",mdxType:"TabItem"},(0,i.kt)(T,{mdxType:"WasmSimpleMessage"}))))}L.isMDXComponent=!0},84661:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(67294),s=t(86010),i="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,o),hidden:t},n)}},36232:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(87462),s=t(67294),i=t(86010),o=t(35074),r=t(74879),l=t(85425),d=t(51085),c="tabList__CuJ",p="tabItem_LNqP";function u(e){var n,t,o=e.lazy,u=e.block,m=e.defaultValue,g=e.values,f=e.groupId,h=e.className,b=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,r.l)(y,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===m?m:null!=(n=null!=m?m:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:b[0].props.value;if(null!==v&&!y.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=(0,l.U)(),w=_.tabGroupChoices,x=_.setTabGroupChoices,S=(0,s.useState)(v),E=S[0],N=S[1],M=[],T=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var C=w[f];null!=C&&C!==E&&y.some((function(e){return e.value===C}))&&N(C)}var I=function(e){var n=e.currentTarget,t=M.indexOf(n),a=y[t].value;a!==E&&(T(n),N(a),null!=f&&x(f,String(a)))},O=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,s=M.indexOf(e.currentTarget)+1;t=null!=(a=M[s])?a:M[0];break;case"ArrowLeft":var i,o=M.indexOf(e.currentTarget)-1;t=null!=(i=M[o])?i:M[M.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:(0,i.Z)("tabs-container",c)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},h)},y.map((function(e){var n=e.value,t=e.label,o=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:function(e){return M.push(e)},onKeyDown:O,onFocus:I,onClick:I},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":E===n})}),null!=t?t:n)}))),o?(0,s.cloneElement)(b.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},b.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==E})}))))}function m(e){var n=(0,o.Z)();return s.createElement(u,(0,a.Z)({key:String(n)},e))}},94365:function(e,n){n.Z='package org.iota.client.example;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.iota.client.*;\nimport org.iota.client.local.*;\n\npublic class ExampleApp {\n\n    protected static final String MAINNET = "https://chrysalis-nodes.iota.cafe";\n\n    // Faucet: https://faucet.chrysalis-devnet.iota.cafe/\n    // Explorer: https://explorer.iota.org/devnet\n    protected static final String TESTNET = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\n    protected static final String TESTNET_LB = "api.lb-0.h.chrysalis-devnet.iota.cafe";\n\n    protected static final String NODE = TESTNET;\n\n    static {\n        NativeAPI.verifyLink();\n    }\n\n    public static void main(String[] args) {\n\n        try {\n            new ExampleApp();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ExampleApp() {\n\n    }\n\n    private static Client node() {\n        Client iota = Client.Builder().withNode(NODE) // Insert your node URL here\n                // .withNodeAuth("https://somechrysalisiotanode.com", "jwt_or_null",\n                // "name_or_null", "password_or_null") //\n                // Optional authentication\n                .finish();\n        return iota;\n    }\n\n    public static void nodeInfo() {\n        try {\n            Client iota = node();\n\n            System.out.println("Node healthy: " + iota.getHealth());\n\n            NodeInfoWrapper info = iota.getInfo();\n            System.out.println("Node url: " + info.url());\n            System.out.println("Node Info: " + info.nodeInfo());\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void generateSeed() {\n        try {\n            SecretKey secret_key = SecretKey.generate();\n            System.out.println(RustHex.encode(secret_key.toBytes()));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void generateAddresses() {\n        try {\n            Client iota = node();\n\n            String seed = RustHex.encode("NONSECURE_USE_OF_DEVELOPMENT_SEED_1");\n            String[] addresses = GetAddressesBuilder.from(seed).withClient(iota).withRange(0, 10).finish();\n            System.out.println(Arrays.toString(addresses));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getBalance() {\n        try {\n            Client iota = node();\n\n            String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n            long seed_balance = iota.getBalance(seed).finish();\n            System.out.println("Account balance: " + seed_balance);\n\n            String address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n            BalanceAddressResponse response = iota.getAddress().balance(address);\n            System.out.println("The balance of " + address + " is " + response.balance());\n\n            UtxoInput[] outputs = iota.getAddress().outputs(address, new OutputsOptions());\n            System.out.println("The outputs of address " + address + " are: " + Arrays.toString(outputs));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getOutputs() {\n        try {\n            Client iota = node();\n\n            String address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n            UtxoInput[] outputs = iota.getAddress().outputs(address, new OutputsOptions());\n            System.out.println("The outputs of address " + address + " are: " + Arrays.toString(outputs));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void simpleMessage() {\n        try {\n            Client iota = node();\n            Message message = iota.message().finish();\n\n            System.out.println(\n                    "Empty message sent: https://explorer.iota.org/mainnet/message/" + message.id().toString());\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getMessageMetadata() {\n        try {\n            Client iota = node();\n            Message message = iota.message().finish();\n\n            MessageMetadata metadata = iota.getMessage().metadata(message.id());\n\n            System.out.println("Message metadata: " + metadata);\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getDataMessage() {\n        Client iota = node();\n\n        Message message = iota.message().withIndexString("Hello").withDataString("Tangle").finish();\n\n        System.out.println("Message sent https://explorer.iota.org/devnet/message/" + message.id());\n\n        MessageId[] fetched_message_ids = iota.getMessage().indexString("Hello");\n        System.out.println("Messages with Hello index: " + Arrays.toString(fetched_message_ids));\n    }\n\n    public static void transaction() {\n        Client iota = node();\n\n        String seed_1 = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n        Message message = iota\n            .message()\n            .withSeed(seed_1)\n            // Insert the output address and amount to spent. The amount cannot be zero.\n            .withOutput(\n                // We generate an address from our seed so that we send the funds to ourselves\n                        iota.getAddresses(seed_1).withRange(0, 1).finish()[0], 1000000\n            ).finish();\n\n        System.out.println("Transaction sent: https://explorer.iota.org/devnet/message/" +  message.id());\n    }\n\n    public static void mqtt() {\n        Client iota = node();\n\n        MqttListener listener = new MqttListener() {\n            @Override\n            public void onEvent(TopicEvent event) {\n                System.out.println(event);\n            }\n        };\n\n        // TODO: Make listeners with the Sync trait\n        // iota.subscriber().withTopic(Topic.from("messages")).subscribe(listener);\n    }\n\n    public static void consolidate() {\n        Client iota = node();\n\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n        // Here all funds will be send to the address with the lowest index in the range\n        String address = Util.consolidateFunds(iota, seed, 0, 0, 150);\n\n        System.out.println("Funds consolidated to" + address);\n    }\n\n    public static void createMaxDust(){\n        Client iota = node();\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n        String seed_2 = "NONSECURE_USE_OF_DEVELOPMENT_SEED_2";\n\n        String[] new_addresses = iota.getAddresses(seed_2).withRange(0, 1).finish();\n\n        Message dustAllowanceMessage = iota\n            .message()\n            .withSeed(seed)\n            .withDustAllowanceOutput(new_addresses[0], 10_000_000)\n            .finish();\n\n        MessageWrap[] msgs = iota.retryUntilIncluded(dustAllowanceMessage.id(), -1, -1);\n\n        // Split funds to own addresses\n        String[] addresses = iota\n            .getAddresses(seed)\n            // We start from index 1 so we can send remaining balance to the address with index 0\n            .withRange(1, 101)\n            .finish();\n\n        ClientMessageBuilder message_builder = iota.message().withSeed(seed);\n        for (String address : addresses) {\n            // Make sure to re-set the builder as the instance is a clone of the old one due to JNI limits\n            message_builder = message_builder.withOutput(address, 1_000_001);\n        }\n        Message message = message_builder.finish();\n\n        System.out.println(\n            "First transaction sent: https://explorer.iota.org/devnet/message/" + message.id()\n        );\n\n        msgs = iota.retryUntilIncluded(message.id(), -1, -1);\n\n        // At this point we have 100 Mi on 100 addresses and we will just send it to the final address\n        // We use the outputs directly so we don\'t double spend them\n        \n        List<UtxoInput> initial_outputs = new ArrayList<>();\n        Optional<MessagePayload> payload = message.payload();\n        if (payload.isPresent() && payload.get().payloadType().equals(MessagePayloadType.TRANSACTION)) {\n            TransactionPayload tx = payload.get().asTransaction();\n            RegularEssence essence = tx.essence().asRegular();\n            Output[] outputs = essence.outputs();\n            for (int index = 0; index < outputs.length; index++) {\n                Output output = outputs[index];\n                if (output.asSignatureLockedSingleOutput().amount() == 1_000_001) {\n                    initial_outputs.add(UtxoInput.from(tx.id(), index));\n                } \n            }\n        }\n\n        String[] first_address_old_seed = iota.getAddresses(seed).withRange(0, 1).finish();\n        List<MessageId> sent_messages = new ArrayList<>();\n        for (UtxoInput input : initial_outputs) {\n            MessageId message_id = iota\n                .message()\n                    .withSeed(seed).withInput(input).withInputRange(1, 101).withOutput(new_addresses[0], 1)\n                // send remaining iotas back\n                    .withOutput(first_address_old_seed[0], 1_000_000)\n                .finish()\n                    .id();\n            System.out.printf("Transaction %i sent: https://explorer.iota.org/devnet/message/%s" + input.index(),\n                    message_id\n            );\n            sent_messages.add(message_id);\n        }\n        // only check last message, if this gets confirmed all other messages should also be confirmed\n        msgs = iota.retryUntilIncluded(sent_messages.get(sent_messages.size() - 1), -1, -1);\n        // Send all funds back to first address\n        long total_balance = iota.getBalance(seed).finish();\n\n        System.out.println("Total balance: " + total_balance);\n\n        message = iota\n            .message()\n            .withSeed(seed)\n            .withOutput(first_address_old_seed[0], total_balance)\n            .finish();\n\n        System.out.println("Final tx sent: https://explorer.iota.org/devnet/message/" + message.id());\n\n        msgs = iota.retryUntilIncluded(message.id(), -1, -1);\n    }\n\n    public static void customPayload() {\n        // Create a client instance\n        Client iota = node();\n\n        IndexationPayload indexation_payload = IndexationPayload.fromStrings("Your Index", "Your Data");\n\n        Message message = iota.message().finishIndex(indexation_payload);\n\n        System.out.printf("Message ID: %s", message.id());\n    }\n\n    public static void offlineExample() {\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n        String toAddress = "atoi1qruzprxum2934lr3p77t96pzlecxv8pjzvtjrzdcgh2f5exa22n6gek0qdq";\n        long amount = 1_000_000;\n\n        Offline offlineExample = new Offline(NODE, seed);\n        String[] inputAddresses = offlineExample.generateAddresses();\n        String preparedData = offlineExample.prepareTransaction(inputAddresses, toAddress, amount);\n        System.out.println("Prepared data: " + preparedData);\n        String signedData = offlineExample.signTransaction(preparedData);\n        System.out.println("Signed data: " + signedData);\n\n        Message message = offlineExample.sendMessage(signedData);\n\n        System.out.printf("Message ID: %s", message.id());\n    }\n}\n'}}]);