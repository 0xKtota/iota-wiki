"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[64507],{3905:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return f}});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),l=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(o),f=n,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return o?r.createElement(m,a(a({ref:t},p),{},{components:o})):r.createElement(m,a({ref:t},p))}));function f(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var l=2;l<i;l++)a[l]=o[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},71753:function(e,t,o){o.r(t),o.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=o(87462),n=o(63366),i=(o(67294),o(3905)),a=["components"],c={keywords:["Stardust","Shimmer","Upgrades","Dynamic POW","Proof-of-work","Congestion control","Protocol Improvements","explanation"],description:"Stardust prepares the protocol for the support of dynamic proof-of-work.",image:"/img/logo/preview.png"},s="Dynamic Proof of Work",l={unversionedId:"explanations/what_is_stardust/dynamic_pow",id:"explanations/what_is_stardust/dynamic_pow",title:"Dynamic Proof of Work",description:"Stardust prepares the protocol for the support of dynamic proof-of-work.",source:"@site/content/build/introduction-docs/develop/docs/explanations/what_is_stardust/dynamic_pow.md",sourceDirName:"explanations/what_is_stardust",slug:"/explanations/what_is_stardust/dynamic_pow",permalink:"/introduction/develop/explanations/what_is_stardust/dynamic_pow",draft:!1,editUrl:"https://github.com/iotaledger/chrysalis-docs/edit/develop/content/build/introduction-docs/develop/docs/explanations/what_is_stardust/dynamic_pow.md",tags:[],version:"current",frontMatter:{keywords:["Stardust","Shimmer","Upgrades","Dynamic POW","Proof-of-work","Congestion control","Protocol Improvements","explanation"],description:"Stardust prepares the protocol for the support of dynamic proof-of-work.",image:"/img/logo/preview.png"},sidebar:"mySidebar",previous:{title:"Offloading Data Processing",permalink:"/introduction/develop/explanations/what_is_stardust/data_processing"},next:{title:"Stardust Ledger",permalink:"/introduction/develop/explanations/ledger/intro"}},p={},u=[],d={toc:u};function f(e){var t=e.components,o=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dynamic-proof-of-work"},"Dynamic Proof of Work"),(0,i.kt)("p",null,"Proof of Work (PoW) is currently employed in IOTA  for congestion control. Every block must include a small amount of\ncomputational work if it is to be considered valid. Note that, while in blockchain networks miners compete to solve the\ncryptographic puzzle of PoW first and hence wasting a huge amount of energy in the process, IOTA users who submit\nblocks to the network take part in a cooperative effort."),(0,i.kt)("p",null,"Chrysalis has a fixed PoW difficulty factor for a unit of data submitted to the network. Therefore, the actual\ncomplexity of the challenge for a block is dependent on its length only."),(0,i.kt)("p",null,"Stardust protocol design incorporates a dynamic PoW difficulty factor based on the congestion of the network. The added\nutility of the protocol upgrade could result in higher network activity. If this load reaches a certain threshold near\nthe limit of the network throughput capabilities, the protocol self-adjusts the PoW difficulty factor.\nWhen the load is reduced, the process reverses to lower the difficulty until the threshold is reached again."),(0,i.kt)("p",null,"This mechanism will be supported by the network after the first ever fluid protocol upgrade, meaning the feature will\nbe activated in the already running, live network without any downtime. The node software is being refactored to\nhandle many more of such future protocol upgrades."))}f.isMDXComponent=!0}}]);