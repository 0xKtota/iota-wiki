"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[89562],{9648:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var i=n(87462),o=n(63366),a=(n(67294),n(3905)),r=n(87308),u=["components"],s={title:"How To Build An Output"},d=void 0,p={unversionedId:"libraries/java/how_to/build_output",id:"libraries/java/how_to/build_output",title:"How To Build An Output",description:"How To Build An Alias Output",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/java/how_to/build_output.mdx",sourceDirName:"libraries/java/how_to",slug:"/libraries/java/how_to/build_output",permalink:"/iota.rs/develop/libraries/java/how_to/build_output",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/java/how_to/build_output.mdx",tags:[],version:"current",frontMatter:{title:"How To Build An Output"},sidebar:"docs",previous:{title:"How To Get An Output",permalink:"/iota.rs/develop/libraries/java/how_to/get_output"},next:{title:"Troubleshooting",permalink:"/iota.rs/develop/troubleshooting"}},l={},c=[{value:"How To Build An Alias Output",id:"how-to-build-an-alias-output",level:2},{value:"How To Build An Basic Output",id:"how-to-build-an-basic-output",level:2},{value:"How To Build A Foundry Output",id:"how-to-build-a-foundry-output",level:2},{value:"How To Build An NFT Output",id:"how-to-build-an-nft-output",level:2}],m={toc:c};function g(t){var e=t.components,n=(0,o.Z)(t,u);return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-build-an-alias-output"},"How To Build An Alias Output"),(0,a.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package output_builder;\n\nimport org.iota.Client;\nimport org.iota.types.ClientConfig;\nimport org.iota.types.ClientException;\nimport org.iota.types.Output;\nimport org.iota.types.UnlockCondition;\nimport org.iota.types.ids.AliasId;\nimport org.iota.types.output_builder.AliasOutputBuilderParams;\nimport org.iota.types.secret.GenerateAddressesOptions;\nimport org.iota.types.secret.MnemonicSecretManager;\nimport org.iota.types.secret.Range;\n\npublic class BuildAliasOutput {\n    public static void main(String[] args) throws ClientException {\n        // Build the client.\n        Client client = new Client(new ClientConfig().withNodes(new String[]{"https://api.testnet.shimmer.network"}));\n\n        // Configure a simple Alias output.\n        MnemonicSecretManager secretManager = new MnemonicSecretManager("endorse answer radar about source reunion marriage tag sausage weekend frost daring base attack because joke dream slender leisure group reason prepare broken river");\n        String hexAddress = client.bech32ToHex(client.generateAddresses(secretManager, new GenerateAddressesOptions().withRange(new Range(0, 1)))[0]);\n        AliasId aliasId = new AliasId("0xa5c28d5baa951de05e375fb19134ea51a918f03acc2d0cee011a42b298d3effa");\n        UnlockCondition[] unlockConditions = new UnlockCondition[]{\n                new UnlockCondition("{ type: 4, address: { type: 0, pubKeyHash: \\"" + hexAddress + "\\" } }"),\n                new UnlockCondition("{ type: 5, address: { type: 0, pubKeyHash: \\"" + hexAddress + "\\" } }")\n        };\n        AliasOutputBuilderParams params = new AliasOutputBuilderParams()\n                .withAliasId(aliasId)\n                .withUnlockConditions(unlockConditions);\n\n        // Build the output.\n        Output output = client.buildAliasOutput(params);\n\n        // Print the output.\n        System.out.println(output.toString());\n\n    }\n}'),(0,a.kt)("h2",{id:"how-to-build-an-basic-output"},"How To Build An Basic Output"),(0,a.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package output_builder;\n\nimport org.iota.Client;\nimport org.iota.types.ClientConfig;\nimport org.iota.types.ClientException;\nimport org.iota.types.Output;\nimport org.iota.types.UnlockCondition;\nimport org.iota.types.output_builder.BasicOutputBuilderParams;\nimport org.iota.types.secret.GenerateAddressesOptions;\nimport org.iota.types.secret.MnemonicSecretManager;\nimport org.iota.types.secret.Range;\n\npublic class BuildBasicOutput {\n    public static void main(String[] args) throws ClientException {\n        // Build the client.\n        Client client = new Client(new ClientConfig().withNodes(new String[]{"https://api.testnet.shimmer.network"}));\n\n        // Configure a simple Basic output.\n        MnemonicSecretManager secretManager = new MnemonicSecretManager("endorse answer radar about source reunion marriage tag sausage weekend frost daring base attack because joke dream slender leisure group reason prepare broken river");\n        String hexAddress = client.bech32ToHex(client.generateAddresses(secretManager, new GenerateAddressesOptions().withRange(new Range(0, 1)))[0]);\n        String amount = "1000000";\n        UnlockCondition[] unlockConditions = new UnlockCondition[]{new UnlockCondition("{ type: 0, address: { type: 0, pubKeyHash: \\"" + hexAddress + "\\"} }")};\n        BasicOutputBuilderParams params = new BasicOutputBuilderParams().withAmount(amount).withUnlockConditions(unlockConditions);\n\n        // Build the output.\n        Output output = client.buildBasicOutput(params);\n\n        // Print the output.\n        System.out.println(output.toString());\n\n    }\n}'),(0,a.kt)("h2",{id:"how-to-build-a-foundry-output"},"How To Build A Foundry Output"),(0,a.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package output_builder;\n\nimport org.iota.Client;\nimport org.iota.types.*;\nimport org.iota.types.ids.AliasId;\nimport org.iota.types.output_builder.FoundryOutputBuilderParams;\nimport org.iota.types.secret.GenerateAddressesOptions;\nimport org.iota.types.secret.MnemonicSecretManager;\nimport org.iota.types.secret.Range;\n\npublic class BuildFoundryOutput {\n    public static void main(String[] args) throws ClientException {\n        // Build the client.\n        Client client = new Client(new ClientConfig().withNodes(new String[]{"https://api.testnet.shimmer.network"}));\n\n        // Configure a simple foundry output.\n        AliasId aliasId = new AliasId("0xa5c28d5baa951de05e375fb19134ea51a918f03acc2d0cee011a42b298d3effa");\n        int serialNumber = 1;\n        NativeToken[] nativeTokens = new NativeToken[]{new NativeToken("{ id: \'0x081e6439529b020328c08224b43172f282cb16649d50c891fa156365323667e47a0100000000\', amount: \'0x32\' }")};\n        TokenScheme tokenScheme = new TokenScheme("{ type: 0, meltedTokens: \'0x0\', mintedTokens: \'0x32\', maximumSupply: \'0x64\' }");\n        UnlockCondition[] unlockConditions = new UnlockCondition[]{new UnlockCondition("{ type: 6, address: { type: 8, aliasId: " + aliasId + "  } }")};\n        FoundryOutputBuilderParams params = new FoundryOutputBuilderParams()\n                .withNativeTokens(nativeTokens)\n                .withSerialNumber(serialNumber)\n                .withTokenScheme(tokenScheme)\n                .withUnlockConditions(unlockConditions);\n\n        // Build the output.\n        Output output = client.buildFoundryOutput(params);\n\n        // Print the output.\n        System.out.println(output.toString());\n\n    }\n}'),(0,a.kt)("h2",{id:"how-to-build-an-nft-output"},"How To Build An NFT Output"),(0,a.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package output_builder;\n\nimport org.iota.Client;\nimport org.iota.types.ClientConfig;\nimport org.iota.types.ClientException;\nimport org.iota.types.Output;\nimport org.iota.types.UnlockCondition;\nimport org.iota.types.ids.NftId;\nimport org.iota.types.output_builder.NftOutputBuilderParams;\nimport org.iota.types.secret.GenerateAddressesOptions;\nimport org.iota.types.secret.MnemonicSecretManager;\nimport org.iota.types.secret.Range;\n\npublic class BuildNftOutput {\n    public static void main(String[] args) throws ClientException {\n        // Build the client.\n        Client client = new Client(new ClientConfig().withNodes(new String[]{"https://api.testnet.shimmer.network"}));\n\n        // Configure a simple NFT output.\n        MnemonicSecretManager secretManager = new MnemonicSecretManager("endorse answer radar about source reunion marriage tag sausage weekend frost daring base attack because joke dream slender leisure group reason prepare broken river");\n        String hexAddress = client.bech32ToHex(client.generateAddresses(secretManager, new GenerateAddressesOptions().withRange(new Range(0, 1)))[0]);\n        NftId nftId = new NftId("0x7ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d3");\n        UnlockCondition[] unlockConditions = new UnlockCondition[]{new UnlockCondition("{ type: 0, address: { type: 0, pubKeyHash: \\"" + hexAddress + "\\" } }")};\n        NftOutputBuilderParams params = new NftOutputBuilderParams()\n                .withNftId(nftId)\n                .withUnlockConditions(unlockConditions);\n\n        // Build the output.\n        Output output = client.buildNftOutput(params);\n\n        // Print the output.\n        System.out.println(output.toString());\n\n    }\n}'))}g.isMDXComponent=!0}}]);