"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[60892],{13712:function(t,e,n){n.d(e,{ZP:function(){return s}});var o=n(87462),r=n(63366),u=(n(67294),n(3905)),i=["components"],a={toc:[]};function s(t){var e=t.components,n=(0,r.Z)(t,i);return(0,u.kt)("wrapper",(0,o.Z)({},a,n,{components:e,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"More advanced examples can be found in the ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/tree/develop/examples"},"examples")," folder."))}s.isMDXComponent=!0},35093:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return _},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var o=n(87462),r=n(63366),u=(n(67294),n(3905)),i=n(56987),a=n(13712),s=["components"],d={title:"How To Get An Output"},l=void 0,p={unversionedId:"libraries/rust/how_to/get_output",id:"libraries/rust/how_to/get_output",title:"How To Get An Output",description:"Run it with",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/get_output.mdx",sourceDirName:"libraries/rust/how_to",slug:"/libraries/rust/how_to/get_output",permalink:"/iota.rs/develop/libraries/rust/how_to/get_output",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/get_output.mdx",tags:[],version:"current",frontMatter:{title:"How To Get An Output"},sidebar:"docs",previous:{title:"How To Generate Addresses",permalink:"/iota.rs/develop/libraries/rust/how_to/generate_addresses"},next:{title:"API Reference",permalink:"/iota.rs/develop/libraries/rust/api_reference"}},c={},m=[],f={toc:m};function _(t){var e=t.components,n=(0,r.Z)(t,s);return(0,u.kt)("wrapper",(0,o.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,u.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! Calls `GET /api/core/v2/outputs/{outputId}`.\n//! Find an output, as JSON, by its identifier.\n//! Run: `cargo run --example node_api_core_get_output --release -- [NODE URL] [OUTPUT ID]`.\n\nuse std::str::FromStr;\n\nuse iota_client::{block::output::OutputId, Client, Result};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Take the node URL from command line argument or use one from env as default.\n    let node_url = std::env::args().nth(1).unwrap_or_else(|| {\n        // This example uses dotenv, which is not safe for use in production.\n        dotenv::dotenv().ok();\n        std::env::var("NODE_URL").unwrap()\n    });\n\n    // Create a client with that node.\n    let client = Client::builder()\n        .with_node(&node_url)?\n        .with_node_sync_disabled()\n        .finish()?;\n\n    // Take the output ID from command line argument or use a default one.\n    let output_id =\n        OutputId::from_str(&std::env::args().nth(2).unwrap_or_else(|| {\n            String::from("0xb66fd384cb5755668f1890ea2e41d699db9cf32f3bc422ad3c24ffeb9c7f01d00000")\n        }))?;\n\n    // Get the output.\n    let output = client.get_output(&output_id).await?;\n\n    println!("{output:#?}");\n\n    Ok(())\n}\n'),(0,u.kt)("p",null,"Run it with"),(0,u.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},"cargo run --example node_api_core_get_output --release -- [NODE URL] [OUTPUT ID]"),(0,u.kt)(a.ZP,{mdxType:"MoreExamples"}))}_.isMDXComponent=!0}}]);