"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[50216],{24119:function(e,n,t){t.d(n,{ZP:function(){return d}});var a=t(87462),s=t(63366),o=(t(67294),t(3905)),r=["components"],i={toc:[]};function d(e){var n=e.components,t=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Though it is possible to send transactions with iota.rs, we strongly recommend that you use the official\n",(0,o.kt)("a",{parentName:"p",href:"https://wiki.iota.org/wallet.rs/welcome"},(0,o.kt)("inlineCode",{parentName:"a"},"wallet.rs"))," library together with the\n",(0,o.kt)("a",{parentName:"p",href:"https://wiki.iota.org/stronghold.rs/welcome"},(0,o.kt)("inlineCode",{parentName:"a"},"stronghold.rs"))," enclave for value-based transfers. This combination\nincorporates the best security practices while dealing with seeds, related addresses, and ",(0,o.kt)("inlineCode",{parentName:"p"},"UTXO"),".")))}d.isMDXComponent=!0},14653:function(e,n,t){t.r(n),t.d(n,{assets:function(){return P},contentTitle:function(){return j},default:function(){return X},frontMatter:function(){return U},metadata:function(){return B},toc:function(){return R}});var a=t(87462),s=t(63366),o=(t(67294),t(3905)),r=t(34259),i=t(18679),d=["components"],l={toc:[]};function u(e){var n=e.components,t=(0,s.Z)(e,d);return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"EXPLANATION: Seeds",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can learn more about seeds in the ",(0,o.kt)("a",{parentName:"p",href:"/iota.rs/explanations/seeds"},"Explanations Section"),".")))}u.isMDXComponent=!0;var c=["components"],p={toc:[]};function m(e){var n=e.components,t=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Avoid Seed Generators",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please note, it is highly recommended that you avoid using online seed generators. The seed is the only key to the given\naddresses. So, anyone who owns the seed also owns all the funds related to respective IOTA addresses.")))}m.isMDXComponent=!0;var g=t(24119),h=t(69319),y=t(94365),f=["components"],S=y.Z.indexOf("public static void generateSeed() {"),b=y.Z.indexOf("public static void generateAddresses() {"),v=y.Z.substring(S,b),x={toc:[]};function _(e){var n=e.components,t=(0,s.Z)(e,f);return(0,o.kt)("wrapper",(0,a.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically\nsecure pseudo-random generator, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"SecretKey.generate()"),":"),(0,o.kt)(h.Z,{className:"language-java",mdxType:"CodeBlock"},v))}_.isMDXComponent=!0;var E=["components"],w={toc:[]};function k(e){var n=e.components,t=(0,s.Z)(e,E);return(0,o.kt)("wrapper",(0,a.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically\nsecure pseudo-random generator, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"crypto.randomBytes()"),":"),(0,o.kt)(h.Z,{className:"language-javascript",mdxType:"CodeBlock"},"function run() {\n    const crypto = require('crypto');\n    const seed = crypto.createHash('sha256').update(crypto.randomBytes(256)).digest('hex');\n    console.log(seed);\n\n    const { ClientBuilder } = require('@iota/client');\n    const client = new ClientBuilder().build();\n\n    const mnemonic = client.generateMnemonic();\n    console.log(mnemonic);\n\n    const hexEncodedSeed = client.mnemonicToHexSeed(mnemonic);\n    console.log(hexEncodedSeed);\n}\n\nrun()\n"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"39bccf7b88a8017e6a96e6f31e34f138829c574dc6061523e84c5f2e53f5ca36\npass phrase weapon yellow diary scissors gift drive strategy antique scheme make surround aerobic mystery coral hope lock walnut become exclude only glove syrup\neff5c97c96ddab55d6fe78f914508750152eaab1b9692236bc79268895ecfd168e91eedd2489ed6c51fc44156b9a2e6c967e4edcfb649ff33d41581be4627347\n")))}k.isMDXComponent=!0;var T=["components"],N={toc:[]};function M(e){var n=e.components,t=(0,s.Z)(e,T);return(0,o.kt)("wrapper",(0,a.Z)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can generate a seed, for example, using SHA256 algorithm on some random input generated by cryptographically secure\npseudo-random generator, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"os.urandom()"),":"),(0,o.kt)(h.Z,{className:"language-javascript",mdxType:"CodeBlock"},"import os\nimport hashlib\n\nrnd_seed = hashlib.sha256(os.urandom(256)).hexdigest()\nprint(rnd_seed)"))}M.isMDXComponent=!0;var C=["components"],O={toc:[]};function A(e){var n=e.components,t=(0,s.Z)(e,C);return(0,o.kt)("wrapper",(0,a.Z)({},O,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically\nsecure pseudo-random generator, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"SecretKey::generate()"),":"),(0,o.kt)(h.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 02_generate_seed --release\n\nuse iota_client::crypto::signatures::ed25519::SecretKey;\n\n/// In this example we will generate a seed\n\n#[tokio::main]\nasync fn main() {\n    let secret_key = SecretKey::generate().unwrap();\n    println!("{}", hex::encode(&secret_key.to_bytes()));\n}\n'))}A.isMDXComponent=!0;var D=["components"],I={toc:[]};function Z(e){var n=e.components,t=(0,s.Z)(e,D);return(0,o.kt)("wrapper",(0,a.Z)({},I,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically\nsecure pseudo-random generator, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"crypto.randomBytes()"),":"),(0,o.kt)(h.Z,{className:"language-javascript",mdxType:"CodeBlock"},"async function run() {\n    const crypto = require('crypto');\n    const seed = crypto.createHash('sha256').update(crypto.randomBytes(256)).digest('hex');\n    console.log(seed);\n\n    const { ClientBuilder } = require('../node')\n    const client = await new ClientBuilder().build();\n\n    const mnemonic = client.generateMnemonic();\n    console.log(mnemonic);\n\n    const hexEncodedSeed = client.mnemonicToHexSeed(mnemonic);\n    console.log(hexEncodedSeed);\n}\n\nrun()\n"))}Z.isMDXComponent=!0;var L=["components"],U={title:"Generate a Seed",description:"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically secure pseudo-random generator, such as crypto.randomBytes().",image:"/img/logo/iota_mark_light.png",keywords:["how to","seed","private key","address","online seed generator","ed25519 signature scheme","java","nodejs","python","rust","wasm"]},j=void 0,B={unversionedId:"examples/generate_seed",id:"examples/generate_seed",title:"Generate a Seed",description:"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically secure pseudo-random generator, such as crypto.randomBytes().",source:"@site/content/build/iota.rs/production/documentation/docs/examples/generate_seed.mdx",sourceDirName:"examples",slug:"/examples/generate_seed",permalink:"/iota.rs/examples/generate_seed",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/production/documentation/content/build/iota.rs/production/documentation/docs/examples/generate_seed.mdx",tags:[],version:"current",frontMatter:{title:"Generate a Seed",description:"You can generate a seed, for example, using the SHA256 algorithm on some random input generated by a cryptographically secure pseudo-random generator, such as crypto.randomBytes().",image:"/img/logo/iota_mark_light.png",keywords:["how to","seed","private key","address","online seed generator","ed25519 signature scheme","java","nodejs","python","rust","wasm"]},sidebar:"docs",previous:{title:"Get Node Information",permalink:"/iota.rs/examples/get_info"},next:{title:"Generate Addresses",permalink:"/iota.rs/examples/generate_addresses"}},P={},R=[],q={toc:R};function X(e){var n=e.components,t=(0,s.Z)(e,L);return(0,o.kt)("wrapper",(0,a.Z)({},q,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(u,{mdxType:"KeyConceptSeeds"}),(0,o.kt)(m,{mdxType:"AvoidSeedGenerators"}),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(_,{mdxType:"JavaGenerateSeed"})),(0,o.kt)(i.Z,{value:"nodejs",label:"Nodejs",mdxType:"TabItem"},(0,o.kt)(k,{mdxType:"NodejsGenerateSeed"})),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(M,{mdxType:"PythonGenerateSeed"})),(0,o.kt)(i.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,o.kt)(A,{mdxType:"RustGenerateSeed"})),(0,o.kt)(i.Z,{value:"wasm",label:"Wasm",mdxType:"TabItem"},(0,o.kt)(Z,{mdxType:"WasmGenerateSeed"}))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plaintext"},"39bccf7b88a8017e6a96e6f31e34f138829c574dc6061523e84c5f2e53f5ca36\npass phrase weapon yellow diary scissors gift drive strategy antique scheme make surround aerobic mystery coral hope lock walnut become exclude only glove syrup\neff5c97c96ddab55d6fe78f914508750152eaab1b9692236bc79268895ecfd168e91eedd2489ed6c51fc44156b9a2e6c967e4edcfb649ff33d41581be4627347\n")),(0,o.kt)(g.ZP,{mdxType:"WalletRecommendation"}))}X.isMDXComponent=!0},18679:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(67294),s=t(86010),o="tabItem_Ymn6";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(o,r),hidden:t},n)}},34259:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(87462),s=t(67294),o=t(86010),r=t(51048),i=t(33609),d=t(1943),l=t(72957),u="tabList__CuJ",c="tabItem_LNqP";function p(e){var n,t,r=e.lazy,p=e.block,m=e.defaultValue,g=e.values,h=e.groupId,y=e.className,f=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),S=null!=g?g:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,i.l)(S,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===m?m:null!=(n=null!=m?m:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:f[0].props.value;if(null!==v&&!S.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+S.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,d.U)(),_=x.tabGroupChoices,E=x.setTabGroupChoices,w=(0,s.useState)(v),k=w[0],T=w[1],N=[],M=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var C=_[h];null!=C&&C!==k&&S.some((function(e){return e.value===C}))&&T(C)}var O=function(e){var n=e.currentTarget,t=N.indexOf(n),a=S[t].value;a!==k&&(M(n),T(a),null!=h&&E(h,String(a)))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,s=N.indexOf(e.currentTarget)+1;t=null!=(a=N[s])?a:N[0];break;case"ArrowLeft":var o,r=N.indexOf(e.currentTarget)-1;t=null!=(o=N[r])?o:N[N.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:(0,o.Z)("tabs-container",u)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},y)},S.map((function(e){var n=e.value,t=e.label,r=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:function(e){return N.push(e)},onKeyDown:A,onFocus:O,onClick:O},r,{className:(0,o.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":k===n})}),null!=t?t:n)}))),r?(0,s.cloneElement)(f.filter((function(e){return e.props.value===k}))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},f.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function m(e){var n=(0,r.Z)();return s.createElement(p,(0,a.Z)({key:String(n)},e))}},94365:function(e,n){n.Z='package org.iota.client.example;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.iota.client.*;\nimport org.iota.client.local.*;\n\npublic class ExampleApp {\n\n    protected static final String MAINNET = "https://chrysalis-nodes.iota.cafe";\n\n    // Faucet: https://faucet.chrysalis-devnet.iota.cafe/\n    // Explorer: https://explorer.iota.org/devnet\n    protected static final String TESTNET = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\n    protected static final String TESTNET_LB = "api.lb-0.h.chrysalis-devnet.iota.cafe";\n\n    protected static final String NODE = TESTNET;\n\n    static {\n        NativeAPI.verifyLink();\n    }\n\n    public static void main(String[] args) {\n\n        try {\n            new ExampleApp();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ExampleApp() {\n\n    }\n\n    private static Client node() {\n        Client iota = Client.Builder().withNode(NODE) // Insert your node URL here\n                // .withNodeAuth("https://somechrysalisiotanode.com", "jwt_or_null",\n                // "name_or_null", "password_or_null") //\n                // Optional authentication\n                .finish();\n        return iota;\n    }\n\n    public static void nodeInfo() {\n        try {\n            Client iota = node();\n\n            System.out.println("Node healthy: " + iota.getHealth());\n\n            NodeInfoWrapper info = iota.getInfo();\n            System.out.println("Node url: " + info.url());\n            System.out.println("Node Info: " + info.nodeInfo());\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void generateSeed() {\n        try {\n            SecretKey secret_key = SecretKey.generate();\n            System.out.println(RustHex.encode(secret_key.toBytes()));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void generateAddresses() {\n        try {\n            Client iota = node();\n\n            String seed = RustHex.encode("NONSECURE_USE_OF_DEVELOPMENT_SEED_1");\n            String[] addresses = GetAddressesBuilder.from(seed).withClient(iota).withRange(0, 10).finish();\n            System.out.println(Arrays.toString(addresses));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getBalance() {\n        try {\n            Client iota = node();\n\n            String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n            long seed_balance = iota.getBalance(seed).finish();\n            System.out.println("Account balance: " + seed_balance);\n\n            String address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n            BalanceAddressResponse response = iota.getAddress().balance(address);\n            System.out.println("The balance of " + address + " is " + response.balance());\n\n            UtxoInput[] outputs = iota.getAddress().outputs(address, new OutputsOptions());\n            System.out.println("The outputs of address " + address + " are: " + Arrays.toString(outputs));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getOutputs() {\n        try {\n            Client iota = node();\n\n            String address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n            UtxoInput[] outputs = iota.getAddress().outputs(address, new OutputsOptions());\n            System.out.println("The outputs of address " + address + " are: " + Arrays.toString(outputs));\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void simpleMessage() {\n        try {\n            Client iota = node();\n            Message message = iota.message().finish();\n\n            System.out.println(\n                    "Empty message sent: https://explorer.iota.org/mainnet/message/" + message.id().toString());\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getMessageMetadata() {\n        try {\n            Client iota = node();\n            Message message = iota.message().finish();\n\n            MessageMetadata metadata = iota.getMessage().metadata(message.id());\n\n            System.out.println("Message metadata: " + metadata);\n        } catch (ClientException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n\n    public static void getDataMessage() {\n        Client iota = node();\n\n        Message message = iota.message().withIndexString("Hello").withDataString("Tangle").finish();\n\n        System.out.println("Message sent https://explorer.iota.org/devnet/message/" + message.id());\n\n        MessageId[] fetched_message_ids = iota.getMessage().indexString("Hello");\n        System.out.println("Messages with Hello index: " + Arrays.toString(fetched_message_ids));\n    }\n\n    public static void transaction() {\n        Client iota = node();\n\n        String seed_1 = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n        Message message = iota\n            .message()\n            .withSeed(seed_1)\n            // Insert the output address and amount to spent. The amount cannot be zero.\n            .withOutput(\n                // We generate an address from our seed so that we send the funds to ourselves\n                        iota.getAddresses(seed_1).withRange(0, 1).finish()[0], 1000000\n            ).finish();\n\n        System.out.println("Transaction sent: https://explorer.iota.org/devnet/message/" +  message.id());\n    }\n\n    public static void mqtt() {\n        Client iota = node();\n\n        MqttListener listener = new MqttListener() {\n            @Override\n            public void onEvent(TopicEvent event) {\n                System.out.println(event);\n            }\n        };\n\n        // TODO: Make listeners with the Sync trait\n        // iota.subscriber().withTopic(Topic.from("messages")).subscribe(listener);\n    }\n\n    public static void consolidate() {\n        Client iota = node();\n\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n\n        // Here all funds will be send to the address with the lowest index in the range\n        String address = Util.consolidateFunds(iota, seed, 0, 0, 150);\n\n        System.out.println("Funds consolidated to" + address);\n    }\n\n    public static void createMaxDust(){\n        Client iota = node();\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n        String seed_2 = "NONSECURE_USE_OF_DEVELOPMENT_SEED_2";\n\n        String[] new_addresses = iota.getAddresses(seed_2).withRange(0, 1).finish();\n\n        Message dustAllowanceMessage = iota\n            .message()\n            .withSeed(seed)\n            .withDustAllowanceOutput(new_addresses[0], 10_000_000)\n            .finish();\n\n        MessageWrap[] msgs = iota.retryUntilIncluded(dustAllowanceMessage.id(), -1, -1);\n\n        // Split funds to own addresses\n        String[] addresses = iota\n            .getAddresses(seed)\n            // We start from index 1 so we can send remaining balance to the address with index 0\n            .withRange(1, 101)\n            .finish();\n\n        ClientMessageBuilder message_builder = iota.message().withSeed(seed);\n        for (String address : addresses) {\n            // Make sure to re-set the builder as the instance is a clone of the old one due to JNI limits\n            message_builder = message_builder.withOutput(address, 1_000_001);\n        }\n        Message message = message_builder.finish();\n\n        System.out.println(\n            "First transaction sent: https://explorer.iota.org/devnet/message/" + message.id()\n        );\n\n        msgs = iota.retryUntilIncluded(message.id(), -1, -1);\n\n        // At this point we have 100 Mi on 100 addresses and we will just send it to the final address\n        // We use the outputs directly so we don\'t double spend them\n        \n        List<UtxoInput> initial_outputs = new ArrayList<>();\n        Optional<MessagePayload> payload = message.payload();\n        if (payload.isPresent() && payload.get().payloadType().equals(MessagePayloadType.TRANSACTION)) {\n            TransactionPayload tx = payload.get().asTransaction();\n            RegularEssence essence = tx.essence().asRegular();\n            Output[] outputs = essence.outputs();\n            for (int index = 0; index < outputs.length; index++) {\n                Output output = outputs[index];\n                if (output.asSignatureLockedSingleOutput().amount() == 1_000_001) {\n                    initial_outputs.add(UtxoInput.from(tx.id(), index));\n                } \n            }\n        }\n\n        String[] first_address_old_seed = iota.getAddresses(seed).withRange(0, 1).finish();\n        List<MessageId> sent_messages = new ArrayList<>();\n        for (UtxoInput input : initial_outputs) {\n            MessageId message_id = iota\n                .message()\n                    .withSeed(seed).withInput(input).withInputRange(1, 101).withOutput(new_addresses[0], 1)\n                // send remaining iotas back\n                    .withOutput(first_address_old_seed[0], 1_000_000)\n                .finish()\n                    .id();\n            System.out.printf("Transaction %i sent: https://explorer.iota.org/devnet/message/%s" + input.index(),\n                    message_id\n            );\n            sent_messages.add(message_id);\n        }\n        // only check last message, if this gets confirmed all other messages should also be confirmed\n        msgs = iota.retryUntilIncluded(sent_messages.get(sent_messages.size() - 1), -1, -1);\n        // Send all funds back to first address\n        long total_balance = iota.getBalance(seed).finish();\n\n        System.out.println("Total balance: " + total_balance);\n\n        message = iota\n            .message()\n            .withSeed(seed)\n            .withOutput(first_address_old_seed[0], total_balance)\n            .finish();\n\n        System.out.println("Final tx sent: https://explorer.iota.org/devnet/message/" + message.id());\n\n        msgs = iota.retryUntilIncluded(message.id(), -1, -1);\n    }\n\n    public static void customPayload() {\n        // Create a client instance\n        Client iota = node();\n\n        IndexationPayload indexation_payload = IndexationPayload.fromStrings("Your Index", "Your Data");\n\n        Message message = iota.message().finishIndex(indexation_payload);\n\n        System.out.printf("Message ID: %s", message.id());\n    }\n\n    public static void offlineExample() {\n        String seed = "NONSECURE_USE_OF_DEVELOPMENT_SEED_1";\n        String toAddress = "atoi1qruzprxum2934lr3p77t96pzlecxv8pjzvtjrzdcgh2f5exa22n6gek0qdq";\n        long amount = 1_000_000;\n\n        Offline offlineExample = new Offline(NODE, seed);\n        String[] inputAddresses = offlineExample.generateAddresses();\n        String preparedData = offlineExample.prepareTransaction(inputAddresses, toAddress, amount);\n        System.out.println("Prepared data: " + preparedData);\n        String signedData = offlineExample.signTransaction(preparedData);\n        System.out.println("Signed data: " + signedData);\n\n        Message message = offlineExample.sendMessage(signedData);\n\n        System.out.printf("Message ID: %s", message.id());\n    }\n}\n'}}]);