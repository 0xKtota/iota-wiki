"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[98588],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(t),f=s,y=u["".concat(l,".").concat(f)]||u[f]||p[f]||a;return t?r.createElement(y,i(i({ref:n},d),{},{components:t})):r.createElement(y,i({ref:n},d))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,i=new Array(a);i[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7273:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var r=t(87462),s=t(63366),a=(t(67294),t(3905)),i=["components"],o={},l="Interface: AccountSyncOptions",c={unversionedId:"libraries/nodejs/references/interfaces/AccountSyncOptions",id:"libraries/nodejs/references/interfaces/AccountSyncOptions",title:"Interface: AccountSyncOptions",description:"Sync options for an account",source:"@site/content/build/wallet.rs/develop/documentation/docs/libraries/nodejs/references/interfaces/AccountSyncOptions.md",sourceDirName:"libraries/nodejs/references/interfaces",slug:"/libraries/nodejs/references/interfaces/AccountSyncOptions",permalink:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/content/build/wallet.rs/develop/documentation/docs/libraries/nodejs/references/interfaces/AccountSyncOptions.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Interface: AccountMeta",permalink:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountMeta"},next:{title:"Interface: Address",permalink:"/wallet.rs/develop/libraries/nodejs/references/interfaces/Address"}},d={},p=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Properties",id:"properties",level:3},{value:"Properties",id:"properties-1",level:2},{value:"addresses",id:"addresses",level:3},{value:"addressStartIndex",id:"addressstartindex",level:3},{value:"forceSyncing",id:"forcesyncing",level:3},{value:"syncPendingTransactions",id:"syncpendingtransactions",level:3},{value:"syncAliasesAndNfts",id:"syncaliasesandnfts",level:3},{value:"syncOnlyMostBasicOutputs",id:"synconlymostbasicoutputs",level:3}],u={toc:p};function f(e){var n=e.components,t=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interface-accountsyncoptions"},"Interface: AccountSyncOptions"),(0,a.kt)("p",null,"Sync options for an account"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions#addresses"},"addresses")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions#addressstartindex"},"addressStartIndex")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions#forcesyncing"},"forceSyncing")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions#syncpendingtransactions"},"syncPendingTransactions")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions#syncaliasesandnfts"},"syncAliasesAndNfts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/wallet.rs/develop/libraries/nodejs/references/interfaces/AccountSyncOptions#synconlymostbasicoutputs"},"syncOnlyMostBasicOutputs"))),(0,a.kt)("h2",{id:"properties-1"},"Properties"),(0,a.kt)("h3",{id:"addresses"},"addresses"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"addresses"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,a.kt)("p",null,"Specific Bech32 encoded addresses of the account to sync, if addresses are provided,\nthen ",(0,a.kt)("inlineCode",{parentName:"p"},"address_start_index")," will be ignored"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"addressstartindex"},"addressStartIndex"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"addressStartIndex"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"number")),(0,a.kt)("p",null,"Address index from which to start syncing addresses. 0 by default, using a higher index will be faster because\naddresses with a lower index will be skipped, but could result in a wrong balance for that reason"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"forcesyncing"},"forceSyncing"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"forceSyncing"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")),(0,a.kt)("p",null,"Usually we skip syncing if it's called within a few seconds, because there can only be new changes every 5\nseconds. But if we change the client options, we need to resync, because the new node could be from a nother\nnetwork and then we need to check all addresses. This will also ignore ",(0,a.kt)("inlineCode",{parentName:"p"},"address_start_index")," and sync all\naddresses. Default: false."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"syncpendingtransactions"},"syncPendingTransactions"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"syncPendingTransactions"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")),(0,a.kt)("p",null,"Checks pending transactions and promotes/reattaches them if necessary.  Default: true."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"syncaliasesandnfts"},"syncAliasesAndNfts"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"syncAliasesAndNfts"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")),(0,a.kt)("p",null,"Specifies if only basic outputs should be synced or also alias and nft outputs. Default: true."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"synconlymostbasicoutputs"},"syncOnlyMostBasicOutputs"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"syncOnlyMostBasicOutputs"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")),(0,a.kt)("p",null,"Specifies if only basic outputs with an AddressUnlockCondition alone should be synced, will overwrite\n",(0,a.kt)("inlineCode",{parentName:"p"},"syncAliasesAndNfts"),". Default: false."))}f.isMDXComponent=!0}}]);