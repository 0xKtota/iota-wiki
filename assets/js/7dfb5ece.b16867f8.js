"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[65822],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>p});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},i=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=u(n),p=a,h=m["".concat(s,".").concat(p)]||m[p]||d[p]||r;return n?o.createElement(h,c(c({ref:t},i),{},{components:n})):o.createElement(h,c({ref:t},i))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var u=2;u<r;u++)c[u]=n[u];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90689:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var o=n(87462),a=(n(67294),n(3905)),r=n(54411),c=n(43305);const l={description:"The common account is controlled by the chain owner, and is used to store funds collected by fees, invalid contracts or sent to the L1 chain address.",image:"/img/logo/WASP_logo_dark.png",keywords:["smart contracts","deposit","transfer","chain","Rust","Solo","how to"]},s="The Common Account",u={unversionedId:"guide/core_concepts/accounts/the-common-account",id:"guide/core_concepts/accounts/the-common-account",title:"The Common Account",description:"The common account is controlled by the chain owner, and is used to store funds collected by fees, invalid contracts or sent to the L1 chain address.",source:"@site/content/build/wasp/production/documentation/docs/guide/core_concepts/accounts/the-common-account.mdx",sourceDirName:"guide/core_concepts/accounts",slug:"/guide/core_concepts/accounts/the-common-account",permalink:"/smart-contracts/guide/core_concepts/accounts/the-common-account",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/master/documentation/content/build/wasp/production/documentation/docs/guide/core_concepts/accounts/the-common-account.mdx",tags:[],version:"current",frontMatter:{description:"The common account is controlled by the chain owner, and is used to store funds collected by fees, invalid contracts or sent to the L1 chain address.",image:"/img/logo/WASP_logo_dark.png",keywords:["smart contracts","deposit","transfer","chain","Rust","Solo","how to"]},sidebar:"tutorialSidebar",previous:{title:"View Account Balances",permalink:"/smart-contracts/guide/core_concepts/accounts/view-account-balances"},next:{title:"Testing Smart Contracts with Solo",permalink:"/smart-contracts/guide/solo/what-is-solo"}},i={},d=[{value:"<code>harvest</code>",id:"harvest",level:2},{value:"Parameters",id:"parameters",level:3}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-common-account"},"The Common Account"),(0,a.kt)("p",null,"The common account is controlled by the chain owner defined in the chain ",(0,a.kt)("a",{parentName:"p",href:"/smart-contracts/guide/core_concepts/core_contracts/root"},"root contract"),"."),(0,a.kt)("p",null,"This account is used to store funds collected by fees, or sent to the chain's L1 address, or to invalid contracts (this\nway the funds are not permanently lost)."),(0,a.kt)("h2",{id:"harvest"},(0,a.kt)("inlineCode",{parentName:"h2"},"harvest")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"harvest")," entry point allows the chain owner to move all funds available in the common account to their own L2\naccount."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ParamForceMinimumBaseTokens"),": The amount of base tokens to leave in the common account (default: 3000).")),(0,a.kt)(r.Z,{defaultValue:"solo",values:[{label:"Solo",value:"solo"},{label:"Solo (Schema)",value:"soloctx"},{label:"Rust (Schema)",value:"rust"},{label:"Go (Schema)",value:"go"}],mdxType:"Tabs"},(0,a.kt)(c.Z,{value:"solo",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"req := solo.NewCallParams(accounts.Contract.Name, accounts.FuncHarvest.Name)\n_, err := chain.PostRequestSync(req.WithMaxAffordableGasBudget(), wallet)\nrequire.NoError(t, err)\n"))),(0,a.kt)(c.Z,{value:"soloctx",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"w := coreaccounts.ScFuncs.Harvest(ctx.Sign(wallet))\nw.Func.TransferBaseTokens(1).PostToChain(chainID)\nrequire.NoError(t, ctx.Err)\n"))),(0,a.kt)(c.Z,{value:"rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let h = coreaccounts::ScFuncs::harvest(ctx);\nh.func.transfer_base_tokens(1).post_to_chain(chainID);\n"))),(0,a.kt)(c.Z,{value:"go",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"w := coreaccounts.ScFuncs.Harvest(ctx)\nw.Func.TransferBaseTokens(1).PostToChain(chainID)\n")))))}p.isMDXComponent=!0},43305:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(67294),a=n(86010);const r="tabItem__kUE";function c(e){let{children:t,hidden:n,className:c}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,c),hidden:n},t)}},54411:(e,t,n)=>{n.d(t,{Z:()=>p});var o=n(87462),a=n(67294),r=n(86010),c=n(51048),l=n(33609),s=n(1943),u=n(72957);const i="tabList_fbd4",d="tabItem_v5XY";function m(e){var t,n;const{lazy:c,block:m,defaultValue:p,values:h,groupId:f,className:v}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=h?h:b.map((e=>{let{props:{value:t,label:n,attributes:o}}=e;return{value:t,label:n,attributes:o}})),y=(0,l.l)(g,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===p?p:null!=(t=null!=p?p:null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)?t:b[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:T}=(0,s.U)(),[N,O]=(0,a.useState)(k),x=[],{blockElementScrollPositionUntilNextRender:_}=(0,u.o5)();if(null!=f){const e=w[f];null!=e&&e!==N&&g.some((t=>t.value===e))&&O(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),o=g[n].value;o!==N&&(_(t),O(o),null!=f&&T(f,String(o)))},S=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var o;const t=x.indexOf(e.currentTarget)+1;n=null!=(o=x[t])?o:x[0];break}case"ArrowLeft":{var a;const t=x.indexOf(e.currentTarget)-1;n=null!=(a=x[t])?a:x[x.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",i)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},v)},g.map((e=>{let{value:t,label:n,attributes:c}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:S,onFocus:E,onClick:E},c,{className:(0,r.Z)("tabs__item",d,null==c?void 0:c.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),c?(0,a.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,c.Z)();return a.createElement(m,(0,o.Z)({key:String(t)},e))}}}]);