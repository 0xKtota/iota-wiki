"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[91062],{71370:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return d},default:function(){return f}});var a=n(74034),r=n(79973),o=(n(67294),n(3905)),s=n(31137),i=n(71871),l=["components"],c={keywords:["results","ISCP function context","view function","retrieve state"],description:"Views are smart contract functions that only allow you to retrieve state information about the smart contract They have a special, limited ISCP function context that does not allow them to change the smart contract state.",image:"/img/logo/WASP_logo_dark.png"},u="View-Only Functions",m={unversionedId:"guide/schema/views",id:"guide/schema/views",isDocsHomePage:!1,title:"View-Only Functions",description:"Views are smart contract functions that only allow you to retrieve state information about the smart contract They have a special, limited ISCP function context that does not allow them to change the smart contract state.",source:"@site/external/wasp/documentation/docs/guide/schema/views.mdx",sourceDirName:"guide/schema",slug:"/guide/schema/views",permalink:"/wasp/guide/schema/views",tags:[],version:"current",frontMatter:{keywords:["results","ISCP function context","view function","retrieve state"],description:"Views are smart contract functions that only allow you to retrieve state information about the smart contract They have a special, limited ISCP function context that does not allow them to change the smart contract state.",image:"/img/logo/WASP_logo_dark.png"},sidebar:"tutorialSidebar",previous:{title:"Thunk Functions",permalink:"/wasp/guide/schema/thunks"},next:{title:"Smart Contract Initialization",permalink:"/wasp/guide/schema/init"}},d=[],p={toc:d};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"view-only-functions"},"View-Only Functions"),(0,o.kt)("p",null,"View-only functions, or Views for short, are smart contract functions that only allow you\nto ",(0,o.kt)("em",{parentName:"p"},"retrieve")," state information about the smart contract. They have a special, limited\nISCP function context that does not allow access to functionality that could result in\nchanges to the smart contract state. This means that all access to the state storage will\nbe through immutable proxies. It also means that they cannot receive or transfer tokens,\nbecause changes to the smart contract account are by definition state changes as well."),(0,o.kt)("p",null,"Views are allowed to call other views on the same chain, but they cannot call any non-view\nsmart contract function, nor can they post cross-chain requests."),(0,o.kt)("p",null,"View functions will always return some data to their caller. It would be silly not to\nreturn data from a View because by definition it cannot have any other side effects that\nshow up elsewhere."),(0,o.kt)("p",null,"For demonstration purposes we provided a View function with the ",(0,o.kt)("inlineCode",{parentName:"p"},"dividend")," smart contract,\ncalled 'getFactor':"),(0,o.kt)(s.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// 'getFactor' is a simple View function. It will retrieve the factor\n// associated with the (mandatory) address parameter it was provided with.\nfunc viewGetFactor(ctx wasmlib.ScViewContext, f *GetFactorContext) {\n    // Since we are sure that the 'address' parameter actually exists we can\n    // retrieve its actual value into an ScAddress value type.\n    var address wasmlib.ScAddress = f.Params.Address().Value()\n\n    // Create an ScImmutableMap proxy to the 'members' map in the state storage.\n    // Note that for views this is an *immutable* map as opposed to the *mutable*\n    // map we can access from the *mutable* state that gets passed to funcs.\n    var members MapAddressToImmutableInt64 = f.State.Members()\n\n    // Retrieve the factor associated with the address parameter.\n    var factor int64 = members.GetInt64(address).Value()\n\n    // Set the factor in the results map of the function context.\n    // The contents of this results map is returned to the caller of the function.\n    f.Results.Factor().SetValue(factor)\n}\n"))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// 'getFactor' is a simple View function. It will retrieve the factor\n// associated with the (mandatory) address parameter it was provided with.\npub fn view_get_factor(_ctx: &ScViewContext, f: &GetFactorContext) {\n    // Since we are sure that the 'address' parameter actually exists we can\n    // retrieve its actual value into an ScAddress value type.\n    let address: ScAddress = f.params.address().value();\n\n    // Create an immutable map proxy to the 'members' map in the state storage.\n    // Note that for views this is an *immutable* map as opposed to the *mutable*\n    // map we can access from the *mutable* state that gets passed to funcs.\n    let members: MapAddressToImmutableInt64 = f.state.members();\n\n    // Retrieve the factor associated with the address parameter.\n    let factor: i64 = members.get_int64(&address).value();\n\n    // Set the factor in the results map of the function context.\n    // The contents of this results map is returned to the caller of the function.\n    f.results.factor().set_value(factor);\n}\n")))),(0,o.kt)("p",null,"Return values are passed to the caller through the predefined ",(0,o.kt)("inlineCode",{parentName:"p"},"results")," map associated\nwith the ISCP function context. Again, this works the same way as for Funcs, although\nFuncs do not necessarily return values to the caller. The schema tool will set up a\nfunction-specific ",(0,o.kt)("inlineCode",{parentName:"p"},"results")," structure with proxies to the result fields in this map."),(0,o.kt)("p",null,"In the next section we will look at ",(0,o.kt)("a",{parentName:"p",href:"/wasp/guide/schema/init"},"smart contract initialization"),"."))}f.isMDXComponent=!0},71871:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},31137:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(74034),r=n(67294),o=n(5730),s=n(54179);var i=function(){var e=(0,r.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(3978),c=n(86010),u="tabItem_1uMI";function m(e){var t,n,a,o=e.lazy,s=e.block,m=e.defaultValue,d=e.values,p=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),w=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=h[0])?void 0:a.props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=i(),g=y.tabGroupChoices,k=y.setTabGroupChoices,x=(0,r.useState)(b),T=x[0],O=x[1],C=[],S=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var I=g[p];null!=I&&I!==T&&v.some((function(e){return e.value===I}))&&O(I)}var P=function(e){var t=e.currentTarget,n=C.indexOf(t),a=v[n].value;a!==T&&(S(t),O(a),null!=p&&k(p,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;n=C[a]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;n=C[r]||C[C.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":s},f)},v.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,className:(0,c.Z)("tabs__item",u,{"tabs__item--active":T===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:E,onFocus:P,onClick:P},null!=n?n:t)}))),o?(0,r.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function d(e){var t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},54179:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),p=r,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);