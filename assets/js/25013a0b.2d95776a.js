"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[2028],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return b}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),b=a,h=u["".concat(s,".").concat(b)]||u[b]||p[b]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},63895:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={description:"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) referenced from smart contracts via their hashes.",image:"/img/logo/WASP_logo_dark.png",keywords:["core contracts","bloc","binary data","store","get","entry points","views","reference"]},s="The `blob` Contract",c={unversionedId:"guide/core_concepts/core_contracts/blob",id:"guide/core_concepts/core_contracts/blob",title:"The `blob` Contract",description:"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) referenced from smart contracts via their hashes.",source:"@site/content/build/wasp/develop/documentation/docs/guide/core_concepts/core_contracts/blob.md",sourceDirName:"guide/core_concepts/core_contracts",slug:"/guide/core_concepts/core_contracts/blob",permalink:"/smart-contracts/develop/guide/core_concepts/core_contracts/blob",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/content/build/wasp/develop/documentation/docs/guide/core_concepts/core_contracts/blob.md",tags:[],version:"current",frontMatter:{description:"The `blobs` contract maintains a registry of _blobs_ (a collection of arbitrary binary data) referenced from smart contracts via their hashes.",image:"/img/logo/WASP_logo_dark.png",keywords:["core contracts","bloc","binary data","store","get","entry points","views","reference"]},sidebar:"tutorialSidebar",previous:{title:"The `accounts` Contract",permalink:"/smart-contracts/develop/guide/core_concepts/core_contracts/accounts"},next:{title:"The `blocklog` Contract",permalink:"/smart-contracts/develop/guide/core_concepts/core_contracts/blocklog"}},d={},p=[{value:"Entry Points",id:"entry-points",level:2},{value:"<code>storeBlob()</code>",id:"storeblob",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Views",id:"views",level:2},{value:"<code>getBlobInfo(hash BlobHash)</code>",id:"getblobinfohash-blobhash",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>getBlobField(hash BlobHash, field BlobField)</code>",id:"getblobfieldhash-blobhash-field-blobfield",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>listBlobs()</code>",id:"listblobs",level:3}],u={toc:p};function b(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-blob-contract"},"The ",(0,o.kt)("inlineCode",{parentName:"h1"},"blob")," Contract"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"blob")," contract is one of the ",(0,o.kt)("a",{parentName:"p",href:"/smart-contracts/develop/overview"},"core contracts")," on each IOTA Smart Contracts chain."),(0,o.kt)("p",null,"The objective of the ",(0,o.kt)("inlineCode",{parentName:"p"},"blob")," contract is to maintain an on-chain registry of ",(0,o.kt)("em",{parentName:"p"},"blobs"),".\nA blob is a collection of named chunks of binary data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<fieldName1>: <binaryChunk1>\n<fieldName2>: <binaryChunk2>\n...\n<fieldNameN>: <binaryChunkN>\n")),(0,o.kt)("p",null,"Both names and chunks are arbitrarily long byte slices."),(0,o.kt)("p",null,"Blobs can be used to store arbitrary data like, for example, a collection of Wasm binaries needed to deploy a smart contract."),(0,o.kt)("p",null,"Each blob in the registry is referenced by its hash. The hash is deterministically calculated from the concatenation of all pieces:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"blobHash = hash( fieldName1 || binaryChunk1 || fieldName2 || binaryChunk2 || ... || fieldNameN || binaryChunkN)\n")),(0,o.kt)("p",null,"Usually, field names are short strings, but their interpretation is use-case specific."),(0,o.kt)("p",null,"Two predefined field names are interpreted by the VM while deploying smart contracts from binary:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"fieldname")," = ",(0,o.kt)("inlineCode",{parentName:"li"},'"v"')," is interpreted as the ",(0,o.kt)("em",{parentName:"li"},"VM type"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"fieldname")," = ",(0,o.kt)("inlineCode",{parentName:"li"},'"p"')," is interpreted as the ",(0,o.kt)("em",{parentName:"li"},"smart contract program binary"),".")),(0,o.kt)("p",null,"If the field ",(0,o.kt)("inlineCode",{parentName:"p"},'"v"')," is equal to the string ",(0,o.kt)("inlineCode",{parentName:"p"},'"wasmtime"'),", the binary chunk of ",(0,o.kt)("inlineCode",{parentName:"p"},'"p"')," is interpreted as WebAssembly binary, executable by the Wasmtime interpreter."),(0,o.kt)("p",null,"The blob describing a smart contract may contain extra fields (ignored by the VM), for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"v" : VM type\n"p" : smart contract program binary\n"d" : data schema for data exchange between smart contract and outside sources and consumers\n"s" : program sources in .zip format\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"entry-points"},"Entry Points"),(0,o.kt)("h3",{id:"storeblob"},(0,o.kt)("inlineCode",{parentName:"h3"},"storeBlob()")),(0,o.kt)("p",null,"Stores a new blob in the registry."),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,"The key/value pairs of the received parameters are interpreted as the field/chunk pairs of the blob."),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hash")," (",(0,o.kt)("inlineCode",{parentName:"li"},"[32]byte"),"): The hash of the stored blob.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"views"},"Views"),(0,o.kt)("h3",{id:"getblobinfohash-blobhash"},(0,o.kt)("inlineCode",{parentName:"h3"},"getBlobInfo(hash BlobHash)")),(0,o.kt)("p",null,"Returns the size of each chunk of the blob."),(0,o.kt)("h4",{id:"parameters-1"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hash")," (",(0,o.kt)("inlineCode",{parentName:"li"},"[32]byte"),"): The hash of the blob.")),(0,o.kt)("h4",{id:"returns-1"},"Returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<fieldName1>: <size of the dataChunk1> (uint32)\n...\n<fieldNameN>: <size of the dataChunkN> (uint32)\n")),(0,o.kt)("h3",{id:"getblobfieldhash-blobhash-field-blobfield"},(0,o.kt)("inlineCode",{parentName:"h3"},"getBlobField(hash BlobHash, field BlobField)")),(0,o.kt)("p",null,"Returns the chunk associated with the given blob field name."),(0,o.kt)("h4",{id:"parameters-2"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hash")," (",(0,o.kt)("inlineCode",{parentName:"li"},"[32]byte"),"): The hash of the blob."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"field")," (",(0,o.kt)("inlineCode",{parentName:"li"},"[]byte"),"): The field name.")),(0,o.kt)("h4",{id:"returns-2"},"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bytes")," (",(0,o.kt)("inlineCode",{parentName:"li"},"[]byte"),"): The chunk associated with the given field name.")),(0,o.kt)("h3",{id:"listblobs"},(0,o.kt)("inlineCode",{parentName:"h3"},"listBlobs()")),(0,o.kt)("p",null,"Returns a list of pairs ",(0,o.kt)("inlineCode",{parentName:"p"},"blob hash"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"total size of chunks")," (",(0,o.kt)("inlineCode",{parentName:"p"},"uint32"),") for all blobs in the registry."))}b.isMDXComponent=!0}}]);