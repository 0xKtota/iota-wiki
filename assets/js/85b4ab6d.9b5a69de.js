"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[45989],{74848:(e,t,o)=>{o.d(t,{ZP:()=>l});var n=o(87462),i=(o(67294),o(3905));const r={toc:[]};function l(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},r,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"More advanced examples can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/tree/develop/examples"},"examples")," folder."))}l.isMDXComponent=!0},78836:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>k,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var n=o(87462),i=(o(67294),o(3905)),r=o(44393),l=o(74848);const a={title:"How To Create A Block"},s=void 0,c={unversionedId:"libraries/rust/how_to/create_block",id:"libraries/rust/how_to/create_block",title:"How To Create A Block",description:"Run it with",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/create_block.mdx",sourceDirName:"libraries/rust/how_to",slug:"/libraries/rust/how_to/create_block",permalink:"/iota.rs/develop/libraries/rust/how_to/create_block",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/create_block.mdx",tags:[],version:"current",frontMatter:{title:"How To Create A Block"},sidebar:"docs",previous:{title:"How To Get A Block",permalink:"/iota.rs/develop/libraries/rust/how_to/get_block"},next:{title:"How To Post A Block",permalink:"/iota.rs/develop/libraries/rust/how_to/post_block"}},d={},u=[],p={toc:u};function k(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example simple_block --release\n\nuse std::env;\n\nuse dotenv::dotenv;\nuse iota_client::{Client, Result};\n\n/// In this example we will send a block without a payload\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    dotenv().ok();\n\n    let node_url = env::var("NODE_URL").unwrap();\n\n    let client = Client::builder()\n        .with_node(&node_url)?\n        .with_node_sync_disabled()\n        .finish()?;\n\n    let block = client.block().finish().await?;\n\n    println!(\n        "Empty block sent: {}/block/{}",\n        env::var("EXPLORER_URL").unwrap(),\n        block.id()\n    );\n    Ok(())\n}\n'),(0,i.kt)("p",null,"Run it with"),(0,i.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},"cargo run --example simple_block --release"),(0,i.kt)(l.ZP,{mdxType:"MoreExamples"}))}k.isMDXComponent=!0}}]);