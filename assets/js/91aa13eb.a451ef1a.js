"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[5776],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,g=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28431:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={description:"Whatever happens during the execution of a smart contract's full entry point, processing of the request always results in the state transition.  The VM context catches exceptions (panics) in the program. Its consequences are recorded in the state of the chain during the fallback processing.",image:"/img/logo/WASP_logo_dark.png",keywords:["testing","solo","error handling","panic","state","transition"]},c="Error Handling",l={unversionedId:"guide/solo/error-handling",id:"guide/solo/error-handling",title:"Error Handling",description:"Whatever happens during the execution of a smart contract's full entry point, processing of the request always results in the state transition.  The VM context catches exceptions (panics) in the program. Its consequences are recorded in the state of the chain during the fallback processing.",source:"@site/content/build/wasp/production/documentation/docs/guide/solo/error-handling.md",sourceDirName:"guide/solo",slug:"/guide/solo/error-handling",permalink:"/smart-contracts/guide/solo/error-handling",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/master/documentation/content/build/wasp/production/documentation/docs/guide/solo/error-handling.md",tags:[],version:"current",frontMatter:{description:"Whatever happens during the execution of a smart contract's full entry point, processing of the request always results in the state transition.  The VM context catches exceptions (panics) in the program. Its consequences are recorded in the state of the chain during the fallback processing.",image:"/img/logo/WASP_logo_dark.png",keywords:["testing","solo","error handling","panic","state","transition"]},sidebar:"tutorialSidebar",previous:{title:"Calling a View",permalink:"/smart-contracts/guide/solo/view-sc"},next:{title:"Account Balances",permalink:"/smart-contracts/guide/solo/balances"}},p={},u=[],d={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-handling"},"Error Handling"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The example code can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/tree/develop/documentation/tutorial-examples"},"Wasp repository"),".")),(0,a.kt)("p",null,"The following test posts a request to the ",(0,a.kt)("inlineCode",{parentName:"p"},"example1")," smart contract without\nthe expected parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"paramString"),". The\nstatement ",(0,a.kt)("inlineCode",{parentName:"p"},'ctx.require(par.exists(), "string parameter not found");')," makes\nthe smart contract panic if the condition is not satisfied."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func TestTutorial4(t *testing.T) {\n    env := solo.New(t, false, false, seed)\n\n    chain := env.NewChain(nil, "ex4")\n    // deploy the contract on chain\n    err := chain.DeployWasmContract(nil, "example1", "example_tutorial_bg.wasm")\n    require.NoError(t, err)\n\n    // call contract incorrectly (omit \'paramString\')\n    req := solo.NewCallParams("example1", "storeString").WithIotas(1)\n    _, err = chain.PostRequestSync(req, nil)\n    require.Error(t, err)\n}\n')),(0,a.kt)("p",null,"The fragments in the output of the test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"37:34.189474700 PANIC   TestTutorial4.ex4   vmcontext/log.go:12 string parameter not found\n\n37:34.192828900 INFO    TestTutorial4.ex4   solo/run.go:148 REQ: 'tx/[0]9r5zoeusdwTcWkDTEMYjeqNj8reiUsLiHF81vExPrvNW: 'panic in VM: string parameter not found''\n")),(0,a.kt)("p",null,"It shows that the panic indeed occurred. The test passes because the resulting\nerror was expected."),(0,a.kt)("p",null,"The log record is a printed receipt of the request. It is stored on the chain for each request processed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"37:34.192828900 INFO    TestTutorial4.ex4   solo/run.go:148 REQ: 'tx/[0]9r5zoeusdwTcWkDTEMYjeqNj8reiUsLiHF81vExPrvNW: 'panic in VM: string parameter not found''\n")),(0,a.kt)("p",null,"Note that this test ends with the state ",(0,a.kt)("inlineCode",{parentName:"p"},"#4"),", although the last\nrequest to the smart contract failed. This is important: ",(0,a.kt)("strong",{parentName:"p"},"whatever happens\nduring the execution of a smart contract's full entry point, processing of the\nrequest always results in the state transition"),"."),(0,a.kt)("p",null,"The VM context catches exceptions (panics) in the program. Its consequences are\nrecorded in the state of the chain during the fallback processing, no matter if\nthe panic was triggered by the logic of the smart contract or whether it was\ntriggered by the sandbox run-time code."),(0,a.kt)("p",null,"In the case of ",(0,a.kt)("inlineCode",{parentName:"p"},"example1")," the error event was recorded in the immutable record\nlog of the chain, aka ",(0,a.kt)("inlineCode",{parentName:"p"},"receipt"),", but the data state of the smart contract wasn't modified. In\nother cases, the fallback actions may be more complex."))}h.isMDXComponent=!0}}]);