"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[45225],{21583:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return p}});var o=t(87462),r=t(63366),a=(t(67294),t(3905)),i=t(87308),s=["components"],c={title:"Examples",description:"Official IOTA Client Library Software Node.js examples.",image:"/img/logo/iota_mark_light.png",keywords:["account","address","nodejs","block","output"]},l=void 0,d={unversionedId:"libraries/nodejs/examples",id:"libraries/nodejs/examples",title:"Examples",description:"Official IOTA Client Library Software Node.js examples.",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/nodejs/examples.mdx",sourceDirName:"libraries/nodejs",slug:"/libraries/nodejs/examples",permalink:"/iota.rs/develop/libraries/nodejs/examples",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/nodejs/examples.mdx",tags:[],version:"current",frontMatter:{title:"Examples",description:"Official IOTA Client Library Software Node.js examples.",image:"/img/logo/iota_mark_light.png",keywords:["account","address","nodejs","block","output"]},sidebar:"docs",previous:{title:"Getting Started with Node.js",permalink:"/iota.rs/develop/libraries/nodejs/getting_started"},next:{title:"api_reference",permalink:"/iota.rs/develop/libraries/nodejs/api_reference"}},u={},p=[],m={toc:p};function g(n){var e=n.components,t=(0,r.Z)(n,s);return(0,a.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"It is not recommended to store passwords/seeds on host's environment variables or in the source code in a production setup! Please make sure you follow our ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/chrysalis-docs/guides/backup_security"},"backup and security")," recommendations for production use!"))),(0,a.kt)("p",null,"Since the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/tree/develop/bindings/nodejs/examples"},"examples")," are written in TypeScript, they first need to be compiled to JavaScript before you can run them.\nTo do this, run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run build")," in the examples folder or use ",(0,a.kt)("inlineCode",{parentName:"p"},"tsc exampleName.js")," to compile a specific example."),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/01_get_info.js\n\n// In this example we will get information about the node\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n        localPow: true,\n    });\n\n    try {\n        const nodeInfo = await client.getInfo();\n        console.log('Node info: ', nodeInfo);\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n\n// Example output:\n// Node info:  {\n//     nodeInfo: {\n//       name: 'HORNET',\n//       version: '2.0.0-alpha.25',\n//       status: {\n//         isHealthy: true,\n//         latestMilestone: [Object],\n//         confirmedMilestone: [Object],\n//         pruningIndex: 0\n//       },\n//       supportedProtocolVersions: [ 2 ],\n//       protocol: {\n//         version: 2,\n//         networkName: 'dummy-1',\n//         bech32HRP: 'rms',\n//         minPoWScore: 1500,\n//         rentStructure: [Object],\n//         tokenSupply: '1450896407249092'\n//       },\n//       pendingProtocolParameters: [],\n//       baseToken: {\n//         name: 'Shimmer',\n//         tickerSymbol: 'SMR',\n//         unit: 'SMR',\n//         subunit: 'glow',\n//         decimals: 6,\n//         useMetricPrefix: false\n//       },\n//       metrics: {\n//         blocksPerSecond: 1.2,\n//         referencedBlocksPerSecond: 1.2,\n//         referencedRate: 100\n//       },\n//       features: []\n//     },\n//     url: 'https://api.testnet.shimmer.network'\n// }\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\n\n// Run with command:\n// node ./dist/02_mnemonic.js\n\n// In this example we will generate a random BIP39 mnemonic\nasync function run() {\n    initLogger();\n\n    const client = new Client({\n        // We don't need a node to generate a mnemonic\n        offline: true,\n    });\n\n    try {\n        const mnemonic = await client.generateMnemonic();\n\n        console.log('Mnemonic: ' + mnemonic);\n        // Example output:\n        // Mnemonic: endorse answer radar about source reunion marriage tag sausage weekend frost daring base attack because joke dream slender leisure group reason prepare broken river\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport {\n    Client,\n    CoinType,\n    initLogger,\n    SHIMMER_TESTNET_BECH32_HRP,\n} from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/03_generate_addresses.js\n\n// In this example we will create addresses from a mnemonic defined in .env\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n    });\n\n    try {\n        if (!process.env.NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1) {\n            throw new Error('.env mnemonic is undefined, see .env.example');\n        }\n        const secretManager = {\n            Mnemonic: process.env.NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1,\n        };\n\n        // Generate public address with custom account index and range.\n        const address = await client.generateAddresses(secretManager, {\n            accountIndex: 0,\n            range: {\n                start: 0,\n                end: 1,\n            },\n        });\n        console.log('First public address:', address, '\\n');\n\n        // Generate an internal address with custom account index and range.\n        const internalAddress = await client.generateAddresses(secretManager, {\n            accountIndex: 0,\n            range: {\n                start: 0,\n                end: 1,\n            },\n            internal: true,\n        });\n        console.log('First internal address:', internalAddress, '\\n');\n\n        // Generate addresses with providing all inputs, that way it can also be done offline without a node.\n        const offlineGeneratedAddresses = await client.generateAddresses(\n            secretManager,\n            {\n                coinType: CoinType.Shimmer,\n                accountIndex: 0,\n                range: {\n                    start: 0,\n                    end: 2,\n                },\n                internal: false,\n                // Generating addresses with client.generateAddresses(secretManager, {}), will by default get the bech32_hrp (Bech32\n                // human readable part) from the nodeinfo, generating it \"offline\" requires setting it in the generateAddressesOptions\n                bech32Hrp: SHIMMER_TESTNET_BECH32_HRP,\n            },\n        );\n        console.log(\n            'List of offline generated public addresses:',\n            offlineGeneratedAddresses,\n        );\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/04_get_address_outputs.js\n\n// In this example we will get the outputs of a known address\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n    });\n\n    try {\n        // Get output ids of basic outputs that can be controlled by this address without further unlock constraints\n        const outputIds = await client.basicOutputIds([\n            {\n                address:\n                    'rms1qpllaj0pyveqfkwxmnngz2c488hfdtmfrj3wfkgxtk4gtyrax0jaxzt70zy',\n            },\n            { hasExpirationCondition: false },\n            { hasTimelockCondition: false },\n            { hasStorageReturnCondition: false },\n        ]);\n        console.log('Output ids: ', outputIds, '\\n');\n\n        const addressOutputs = await client.getOutputs(outputIds);\n        console.log('Address outputs: ', addressOutputs);\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/04b_get_output.js\n\n// In this example we will get output from a known outputId\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n        localPow: true,\n    });\n\n    try {\n        const output = await client.getOutput(\n            '0xa0b9ad3f5aa2bfcaed30cde6e1d572e93b7e8bb5a417f5a7ef3502889b5dbcb40000',\n        );\n        console.log('Output: ', output);\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/05_get_address_balance.js\n\n// In this example we will get the outputs of an address that has no additional unlock\n// conditions and sum the amounts and native tokens\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n    });\n\n    try {\n        if (!process.env.NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1) {\n            throw new Error('.env mnemonic is undefined, see .env.example');\n        }\n        const secretManager = {\n            Mnemonic: process.env.NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1,\n        };\n\n        // Generate the first address\n        const addresses = await client.generateAddresses(secretManager, {\n            accountIndex: 0,\n            range: {\n                start: 0,\n                end: 1,\n            },\n        });\n\n        // Get output ids of basic outputs that can be controlled by this address without further unlock constraints\n        const outputIds = await client.basicOutputIds([\n            { address: addresses[0] },\n            { hasExpirationCondition: false },\n            { hasTimelockCondition: false },\n            { hasStorageReturnCondition: false },\n        ]);\n\n        // Get outputs by their IDs\n        const addressOutputs = await client.getOutputs(outputIds);\n\n        // Calculate the total amount and native tokens\n        let totalAmount = 0;\n        const totalNativeTokens: { [id: string]: number } = {};\n        for (const outputResponse of addressOutputs) {\n            const output = outputResponse['output'];\n\n            if ('nativeTokens' in output) {\n                output.nativeTokens?.forEach(\n                    (token) =>\n                        (totalNativeTokens[token.id] =\n                            (totalNativeTokens[token.id] || 0) +\n                            parseInt(token.amount)),\n                );\n            }\n\n            totalAmount += parseInt(output.amount);\n        }\n\n        console.log(\n            `Outputs controlled by ${addresses[0]} have: ${totalAmount}glow and native tokens: `,\n            totalNativeTokens,\n        );\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/06_simple_block.js\n\n// In this example we will send a block without a payload\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n        localPow: true,\n    });\n\n    try {\n        // Create block with no payload\n        const block = await client.generateBlock();\n        console.log('Block:', block, '\\n');\n\n        // Send block\n        const blockId = await client.postBlock(block);\n\n        console.log(\n            `Empty block sent: ${process.env.EXPLORER_URL}/block/${blockId}`,\n        );\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/07_get_block_data.js\n\n// In this example we will send a block and get the data and metadata for it\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n    });\n\n    try {\n        // Create block with no payload.\n        const block = await client.generateBlock();\n        console.log('Block:', block, '\\n');\n\n        // Hash the block to get the block id.\n        const blockId = await client.blockId(block);\n\n        // Get the metadata for the block.\n        const blockMetadata = await client.getBlockMetadata(blockId);\n        console.log('Block metadata: ', blockMetadata, '\\n');\n\n        // Request the block by it's id.\n        const blockData = await client.getBlock(blockId);\n        console.log('Block data: ', blockData, '\\n');\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, utf8ToBytes, hexToUtf8, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/08_data_block.js\n\n// In this example we will send a block with a tagged data payload\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n    });\n\n    const options = {\n        tag: utf8ToBytes('Hello'),\n        data: utf8ToBytes('Tangle'),\n    };\n    try {\n        const mnemonic = await client.generateMnemonic();\n        const secretManager = { Mnemonic: mnemonic };\n\n        // Create block with tagged payload\n        const block = await client.generateBlock(secretManager, options);\n        console.log('Block:', block, '\\n');\n\n        // Send block\n        const blockId = await client.postBlock(block);\n\n        console.log(\n            `Block sent: ${process.env.EXPLORER_URL}/block/${blockId}\\n`,\n        );\n\n        const fetchedBlock = await client.getBlock(blockId);\n        console.log('Block data: ', fetchedBlock);\n\n        const payload = fetchedBlock.payload;\n        if (payload && 'data' in payload && payload.data) {\n            console.log('Decoded data:', hexToUtf8(payload.data));\n        }\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/09_transaction.js\n\n// In this example we will send a transaction\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    const client = new Client({\n        // Insert your node URL in the .env.\n        nodes: [process.env.NODE_URL],\n        localPow: true,\n    });\n\n    try {\n        if (!process.env.NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1) {\n            throw new Error('.env mnemonic is undefined, see .env.example');\n        }\n\n        // Configure your own mnemonic in \".env\". Since the output amount cannot be zero, the mnemonic must contain non-zero\n        // balance\n        const secretManager = {\n            Mnemonic: process.env.NON_SECURE_USE_OF_DEVELOPMENT_MNEMONIC_1,\n        };\n\n        // We generate an address from our own mnemonic so that we send the funds to ourselves\n        const addresses = await client.generateAddresses(secretManager, {\n            range: {\n                start: 1,\n                end: 2,\n            },\n        });\n\n        // We prepare the transaction\n        // Insert the output address and amount to spend. The amount cannot be zero.\n        const block = await client.generateBlock(secretManager, {\n            output: {\n                address: addresses[0],\n                amount: '1000000',\n            },\n        });\n        console.log('Block: ', block, '\\n');\n\n        // Send transaction\n        const blockId = await client.postBlock(block);\n\n        console.log(\n            `Transaction sent: ${process.env.EXPLORER_URL}/block/${blockId}`,\n        );\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}\n\nrun().then(() => process.exit());\n"),(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"// Copyright 2021-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { Client, initLogger } from '@iota/client';\nrequire('dotenv').config({ path: '../.env' });\n\n// Run with command:\n// node ./dist/10_mqtt.js\n\n// Initialize MQTT listener\nasync function run() {\n    initLogger();\n    if (!process.env.NODE_URL) {\n        throw new Error('.env NODE_URL is undefined, see .env.example');\n    }\n\n    // Connecting to a MQTT broker using raw ip doesn't work with TCP. This is a limitation of rustls.\n    const client = new Client({\n        nodes: [process.env.NODE_URL],\n    });\n\n    // Array of topics to subscribe to\n    // Topics can be found here https://studio.asyncapi.com/?url=https://raw.githubusercontent.com/iotaledger/tips/stardust-event-api/tips/TIP-0028/event-api.yml\n    const topics = ['blocks'];\n\n    const callback = function (error: Error, data: string) {\n        console.log(JSON.parse(data));\n    };\n\n    client.listen(topics, callback);\n}\n\nrun();\n"))}g.isMDXComponent=!0}}]);