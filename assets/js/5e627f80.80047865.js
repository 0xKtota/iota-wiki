"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[22818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=i(n),y=r,d=c["".concat(s,".").concat(y)]||c[y]||m[y]||o;return n?a.createElement(d,u(u({ref:t},p),{},{components:n})):a.createElement(d,u({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,u=new Array(o);u[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,u[1]=l;for(var i=2;i<o;i++)u[i]=n[i];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},61367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),o=n(54411),u=n(43305);const l={keywords:["containers","types","container types","single type","array","schema definition file"],description:"You can add a typedefs section to the schema definition file, where you can define a single type name for a container type. This way you can easily create containers that contain container types.",image:"/img/logo/WASP_logo_dark.png"},s="Type Definitions",i={unversionedId:"guide/wasm_vm/typedefs",id:"guide/wasm_vm/typedefs",title:"Type Definitions",description:"You can add a typedefs section to the schema definition file, where you can define a single type name for a container type. This way you can easily create containers that contain container types.",source:"@site/content/build/wasp/production/documentation/docs/guide/wasm_vm/typedefs.mdx",sourceDirName:"guide/wasm_vm",slug:"/guide/wasm_vm/typedefs",permalink:"/smart-contracts/guide/wasm_vm/typedefs",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/master/documentation/content/build/wasp/production/documentation/docs/guide/wasm_vm/typedefs.mdx",tags:[],version:"current",frontMatter:{keywords:["containers","types","container types","single type","array","schema definition file"],description:"You can add a typedefs section to the schema definition file, where you can define a single type name for a container type. This way you can easily create containers that contain container types.",image:"/img/logo/WASP_logo_dark.png"},sidebar:"tutorialSidebar",previous:{title:"Structured Data Types",permalink:"/smart-contracts/guide/wasm_vm/structs"},next:{title:"Smart Contract State",permalink:"/smart-contracts/guide/wasm_vm/state"}},p={},m=[],c={toc:m};function y(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"type-definitions"},"Type Definitions"),(0,r.kt)("p",null,"We allow nesting of ",(0,r.kt)("a",{parentName:"p",href:"/smart-contracts/guide/wasm_vm/proxies#container-proxies"},"container types"),", but it\nis not possible to specify these types directly because the type name syntax only\nallows you to specify a single container type."),(0,r.kt)("p",null,"There is a simple solution to this problem. You can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"typedefs")," section to the\nschema definition file, where you can define a single type name for a container type. That\nway you can easily create containers that contain such container types. The schema tool\nwill automatically generate the in-between proxy types necessary to make this work."),(0,r.kt)("p",null,"To keep it at the ",(0,r.kt)("inlineCode",{parentName:"p"},"betting")," smart contract from ",(0,r.kt)("a",{parentName:"p",href:"/smart-contracts/guide/wasm_vm/structs"},"the previous section"),",\nimagine you want to keep track of all betting rounds. Since a betting round contains an\narray of all bets in a round, if it weren't for typedefs you could not define it easily."),(0,r.kt)("p",null,"Instead, now you add the following to your schema definition file:"),(0,r.kt)(o.Z,{defaultValue:"yaml",values:[{label:"schema.yaml",value:"yaml"}],mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"yaml",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"typedefs:\n  BettingRound: Bet[] // one round of bets\nstate:\n  rounds: BettingRound[] // keep track of all betting rounds\n")))),(0,r.kt)("p",null,"The schema tool will generate the following code in ",(0,r.kt)("inlineCode",{parentName:"p"},"typedefs.xx")," for the BettingRound\ntype:"),(0,r.kt)(o.Z,{defaultValue:"go",values:[{label:"Go",value:"go"},{label:"Rust",value:"rust"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"\n\ntype ArrayOfImmutableBet struct {\n    proxy wasmtypes.Proxy\n}\n\nfunc (a ArrayOfImmutableBet) Length() uint32 {\n    return a.proxy.Length()\n}\n\nfunc (a ArrayOfImmutableBet) GetBet(index uint32) ImmutableBet {\n    return ImmutableBet{proxy: a.proxy.Index(index)}\n}\n\ntype ImmutableBettingRound = ArrayOfImmutableBet\n\ntype ArrayOfMutableBet struct {\n    proxy wasmtypes.Proxy\n}\n\nfunc (a ArrayOfMutableBet) AppendBet() MutableBet {\n    return MutableBet{proxy: a.proxy.Append()}\n}\n\nfunc (a ArrayOfMutableBet) Clear() {\n    a.proxy.ClearArray()\n}\n\nfunc (a ArrayOfMutableBet) Length() uint32 {\n    return a.proxy.Length()\n}\n\nfunc (a ArrayOfMutableBet) GetBet(index uint32) MutableBet {\n    return MutableBet{proxy: a.proxy.Index(index)}\n}\n\ntype MutableBettingRound = ArrayOfMutableBet\n'))),(0,r.kt)(u.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use wasmlib::*;\nuse crate::*;\n\n#[derive(Clone)]\npub struct ArrayOfImmutableBet {\n    pub(crate) proxy: Proxy,\n}\n\nimpl ArrayOfImmutableBet {\n    pub fn length(&self) -> u32 {\n        self.proxy.length()\n    }\n\n\n    pub fn get_bet(&self, index: u32) -> ImmutableBet {\n        ImmutableBet { proxy: self.proxy.index(index) }\n    }\n}\n\npub type ImmutableBettingRound = ArrayOfImmutableBet;\n\n#[derive(Clone)]\npub struct ArrayOfMutableBet {\n    pub(crate) proxy: Proxy,\n}\n\nimpl ArrayOfMutableBet {\n\n    pub fn append_bet(&self) -> MutableBet {\n        MutableBet { proxy: self.proxy.append() }\n    }\n    pub fn clear(&self) {\n        self.proxy.clear_array();\n    }\n\n    pub fn length(&self) -> u32 {\n        self.proxy.length()\n    }\n\n\n    pub fn get_bet(&self, index: u32) -> MutableBet {\n        MutableBet { proxy: self.proxy.index(index) }\n    }\n}\n\npub type MutableBettingRound = ArrayOfMutableBet;\n"))),(0,r.kt)(u.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as wasmtypes from "wasmlib/wasmtypes";\nimport * as sc from "./index";\n\nexport class ArrayOfImmutableBet extends wasmtypes.ScProxy {\n\n    length(): u32 {\n        return this.proxy.length();\n    }\n\n    getBet(index: u32): sc.ImmutableBet {\n        return new sc.ImmutableBet(this.proxy.index(index));\n    }\n}\n\nexport class ImmutableBettingRound extends ArrayOfImmutableBet {\n}\n\nexport class ArrayOfMutableBet extends wasmtypes.ScProxy {\n\n    appendBet(): sc.MutableBet {\n        return new sc.MutableBet(this.proxy.append());\n    }\n\n    clear(): void {\n        this.proxy.clearArray();\n    }\n\n    length(): u32 {\n        return this.proxy.length();\n    }\n\n    getBet(index: u32): sc.MutableBet {\n        return new sc.MutableBet(this.proxy.index(index));\n    }\n}\n\nexport class MutableBettingRound extends ArrayOfMutableBet {\n}\n')))),(0,r.kt)("p",null,"Note how ImmutableBettingRound and MutableBettingRound type aliases are created for the\ntypes ArrayOfImmutableBet and ArrayOfMutableBet. These are subsequently used in the state\ndefinition that is generated in ",(0,r.kt)("inlineCode",{parentName:"p"},"state.xx"),":"),(0,r.kt)(o.Z,{defaultValue:"go",groupId:"language",values:[{label:"Go",value:"go"},{label:"Rust",value:"rust"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package betting\n\nimport "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"\n\ntype ArrayOfImmutableBettingRound struct {\n    proxy wasmtypes.Proxy\n}\n\nfunc (a ArrayOfImmutableBettingRound) Length() uint32 {\n    return a.proxy.Length()\n}\n\nfunc (a ArrayOfImmutableBettingRound) GetBettingRound(index uint32) ImmutableBettingRound {\n    return ImmutableBettingRound{proxy: a.proxy.Index(index)}\n}\n\ntype ImmutableBettingState struct {\n    proxy wasmtypes.Proxy\n}\n\n// all bets that were made in this round\nfunc (s ImmutableBettingState) Bets() ArrayOfImmutableBet {\n    return ArrayOfImmutableBet{proxy: s.proxy.Root(StateBets)}\n}\n\n// current owner of this smart contract\nfunc (s ImmutableBettingState) Owner() wasmtypes.ScImmutableAgentID {\n    return wasmtypes.NewScImmutableAgentID(s.proxy.Root(StateOwner))\n}\n\nfunc (s ImmutableBettingState) Rounds() ArrayOfImmutableBettingRound {\n    return ArrayOfImmutableBettingRound{proxy: s.proxy.Root(StateRounds)}\n}\n\ntype ArrayOfMutableBettingRound struct {\n    proxy wasmtypes.Proxy\n}\n\nfunc (a ArrayOfMutableBettingRound) AppendBettingRound() MutableBettingRound {\n    return MutableBettingRound{proxy: a.proxy.Append()}\n}\n\nfunc (a ArrayOfMutableBettingRound) Clear() {\n    a.proxy.ClearArray()\n}\n\nfunc (a ArrayOfMutableBettingRound) Length() uint32 {\n    return a.proxy.Length()\n}\n\nfunc (a ArrayOfMutableBettingRound) GetBettingRound(index uint32) MutableBettingRound {\n    return MutableBettingRound{proxy: a.proxy.Index(index)}\n}\n\ntype MutableBettingState struct {\n    proxy wasmtypes.Proxy\n}\n\nfunc (s MutableBettingState) AsImmutable() ImmutableBettingState {\n    return ImmutableBettingState(s)\n}\n\n// all bets that were made in this round\nfunc (s MutableBettingState) Bets() ArrayOfMutableBet {\n    return ArrayOfMutableBet{proxy: s.proxy.Root(StateBets)}\n}\n\n// current owner of this smart contract\nfunc (s MutableBettingState) Owner() wasmtypes.ScMutableAgentID {\n    return wasmtypes.NewScMutableAgentID(s.proxy.Root(StateOwner))\n}\n\nfunc (s MutableBettingState) Rounds() ArrayOfMutableBettingRound {\n    return ArrayOfMutableBettingRound{proxy: s.proxy.Root(StateRounds)}\n}\n'))),(0,r.kt)(u.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use wasmlib::*;\n\nuse crate::*;\n\n#[derive(Clone)]\npub struct ArrayOfImmutableBettingRound {\n    pub(crate) proxy: Proxy,\n}\n\nimpl ArrayOfImmutableBettingRound {\n    pub fn length(&self) -> u32 {\n        self.proxy.length()\n    }\n\n\n    pub fn get_betting_round(&self, index: u32) -> ImmutableBettingRound {\n        ImmutableBettingRound { proxy: self.proxy.index(index) }\n    }\n}\n\n#[derive(Clone)]\npub struct ImmutableBettingState {\n    pub(crate) proxy: Proxy,\n}\n\nimpl ImmutableBettingState {\n    // all bets that were made in this round\n    pub fn bets(&self) -> ArrayOfImmutableBet {\n        ArrayOfImmutableBet { proxy: self.proxy.root(STATE_BETS) }\n    }\n\n    // current owner of this smart contract\n    pub fn owner(&self) -> ScImmutableAgentID {\n        ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))\n    }\n\n    pub fn rounds(&self) -> ArrayOfImmutableBettingRound {\n        ArrayOfImmutableBettingRound { proxy: self.proxy.root(STATE_ROUNDS) }\n    }\n}\n\n#[derive(Clone)]\npub struct ArrayOfMutableBettingRound {\n    pub(crate) proxy: Proxy,\n}\n\nimpl ArrayOfMutableBettingRound {\n\n    pub fn append_betting_round(&self) -> MutableBettingRound {\n        MutableBettingRound { proxy: self.proxy.append() }\n    }\n    pub fn clear(&self) {\n        self.proxy.clear_array();\n    }\n\n    pub fn length(&self) -> u32 {\n        self.proxy.length()\n    }\n\n\n    pub fn get_betting_round(&self, index: u32) -> MutableBettingRound {\n        MutableBettingRound { proxy: self.proxy.index(index) }\n    }\n}\n\n#[derive(Clone)]\npub struct MutableBettingState {\n    pub(crate) proxy: Proxy,\n}\n\nimpl MutableBettingState {\n    pub fn as_immutable(&self) -> ImmutableBettingState {\n        ImmutableBettingState { proxy: self.proxy.root("") }\n    }\n\n    // all bets that were made in this round\n    pub fn bets(&self) -> ArrayOfMutableBet {\n        ArrayOfMutableBet { proxy: self.proxy.root(STATE_BETS) }\n    }\n\n    // current owner of this smart contract\n    pub fn owner(&self) -> ScMutableAgentID {\n        ScMutableAgentID::new(self.proxy.root(STATE_OWNER))\n    }\n\n    pub fn rounds(&self) -> ArrayOfMutableBettingRound {\n        ArrayOfMutableBettingRound { proxy: self.proxy.root(STATE_ROUNDS) }\n    }\n}\n'))),(0,r.kt)(u.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as wasmtypes from "wasmlib/wasmtypes";\nimport * as sc from "./index";\n\nexport class ArrayOfImmutableBettingRound extends wasmtypes.ScProxy {\n\n    length(): u32 {\n        return this.proxy.length();\n    }\n\n    getBettingRound(index: u32): sc.ImmutableBettingRound {\n        return new sc.ImmutableBettingRound(this.proxy.index(index));\n    }\n}\n\nexport class ImmutableBettingState extends wasmtypes.ScProxy {\n    // all bets that were made in this round\n    bets(): sc.ArrayOfImmutableBet {\n        return new sc.ArrayOfImmutableBet(this.proxy.root(sc.StateBets));\n    }\n\n    // current owner of this smart contract\n    owner(): wasmtypes.ScImmutableAgentID {\n        return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.StateOwner));\n    }\n\n    rounds(): sc.ArrayOfImmutableBettingRound {\n        return new sc.ArrayOfImmutableBettingRound(this.proxy.root(sc.StateRounds));\n    }\n}\n\nexport class ArrayOfMutableBettingRound extends wasmtypes.ScProxy {\n\n    appendBettingRound(): sc.MutableBettingRound {\n        return new sc.MutableBettingRound(this.proxy.append());\n    }\n\n    clear(): void {\n        this.proxy.clearArray();\n    }\n\n    length(): u32 {\n        return this.proxy.length();\n    }\n\n    getBettingRound(index: u32): sc.MutableBettingRound {\n        return new sc.MutableBettingRound(this.proxy.index(index));\n    }\n}\n\nexport class MutableBettingState extends wasmtypes.ScProxy {\n    asImmutable(): sc.ImmutableBettingState {\n        return new sc.ImmutableBettingState(this.proxy);\n    }\n\n    // all bets that were made in this round\n    bets(): sc.ArrayOfMutableBet {\n        return new sc.ArrayOfMutableBet(this.proxy.root(sc.StateBets));\n    }\n\n    // current owner of this smart contract\n    owner(): wasmtypes.ScMutableAgentID {\n        return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.StateOwner));\n    }\n\n    rounds(): sc.ArrayOfMutableBettingRound {\n        return new sc.ArrayOfMutableBettingRound(this.proxy.root(sc.StateRounds));\n    }\n}\n')))),(0,r.kt)("p",null,"Notice how the rounds() member function returns a proxy to an array of BettingRound.\nWhich in turn is an array of Bet. So, the desired result has been achieved. And every\naccess step along the way only allows you to take the path laid out which is checked at\ncompile-time."),(0,r.kt)("p",null,"In the next section we will explore how the schema tool generates a proxy interface for\nmutable ",(0,r.kt)("a",{parentName:"p",href:"/smart-contracts/guide/wasm_vm/state"},"states"),"."))}y.isMDXComponent=!0},43305:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(67294),r=n(86010);const o="tabItem__kUE";function u(e){let{children:t,hidden:n,className:u}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,u),hidden:n},t)}},54411:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(87462),r=n(67294),o=n(86010),u=n(51048),l=n(33609),s=n(1943),i=n(72957);const p="tabList_fbd4",m="tabItem_v5XY";function c(e){var t,n;const{lazy:u,block:c,defaultValue:y,values:d,groupId:b,className:f}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),x=null!=d?d:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,l.l)(x,((e,t)=>e.value===t.value));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const B=null===y?y:null!=(t=null!=y?y:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==B&&!x.some((e=>e.value===B)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+B+'" but none of its children has the corresponding value. Available values are: '+x.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:v}=(0,s.U)(),[I,O]=(0,r.useState)(B),A=[],{blockElementScrollPositionUntilNextRender:R}=(0,i.o5)();if(null!=b){const e=w[b];null!=e&&e!==I&&x.some((t=>t.value===e))&&O(e)}const k=e=>{const t=e.currentTarget,n=A.indexOf(t),a=x[n].value;a!==I&&(R(t),O(a),null!=b&&v(b,String(a)))},M=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=A.indexOf(e.currentTarget)+1;n=null!=(a=A[t])?a:A[0];break}case"ArrowLeft":{var r;const t=A.indexOf(e.currentTarget)-1;n=null!=(r=A[t])?r:A[A.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},f)},x.map((e=>{let{value:t,label:n,attributes:u}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:e=>A.push(e),onKeyDown:M,onFocus:k,onClick:k},u,{className:(0,o.Z)("tabs__item",m,null==u?void 0:u.className,{"tabs__item--active":I===t})}),null!=n?n:t)}))),u?(0,r.cloneElement)(g.filter((e=>e.props.value===I))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==I})))))}function y(e){const t=(0,u.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}}}]);