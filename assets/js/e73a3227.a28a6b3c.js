"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[4279],{20738:function(e,t,o){o.d(t,{ZP:function(){return l}});var n=o(87462),r=o(63366),i=(o(67294),o(3905)),a=["components"],s={toc:[]};function l(e){var t=e.components,o=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"More advanced examples can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/tree/develop/examples"},"examples")," folder."))}l.isMDXComponent=!0},3906:function(e,t,o){o.r(t),o.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return k}});var n=o(87462),r=o(63366),i=(o(67294),o(3905)),a=o(69319),s=o(20738),l=["components"],c={title:"How To Post A Block"},u=void 0,p={unversionedId:"libraries/rust/how_to/post_block",id:"libraries/rust/how_to/post_block",title:"How To Post A Block",description:"Run it with",source:"@site/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/post_block.mdx",sourceDirName:"libraries/rust/how_to",slug:"/libraries/rust/how_to/post_block",permalink:"/iota.rs/develop/libraries/rust/how_to/post_block",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/develop/documentation/content/build/iota.rs/develop/documentation/docs/libraries/rust/how_to/post_block.mdx",tags:[],version:"current",frontMatter:{title:"How To Post A Block"},sidebar:"docs",previous:{title:"How To Create A Block",permalink:"/iota.rs/develop/libraries/rust/how_to/create_block"},next:{title:"How To Generate A Mnemonic",permalink:"/iota.rs/develop/libraries/rust/how_to/generate_mnemonic"}},d={},k=[],m={toc:k};function b(e){var t=e.components,o=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(a.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! Calls `POST /api/core/v2/blocks`.\n//! Submits a block as a JSON payload.\n//! Run: `cargo run --example node_api_core_post_block --release -- [NODE URL]`.\n\nuse iota_client::{\n    block::{parent::Parents, Block},\n    Client, Result,\n};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Take the node URL from command line argument or use one from env as default.\n    let node_url = std::env::args().nth(1).unwrap_or_else(|| {\n        // This example uses dotenv, which is not safe for use in production.\n        dotenv::dotenv().ok();\n        std::env::var("NODE_URL").unwrap()\n    });\n\n    // Create a client with that node.\n    let client = Client::builder()\n        .with_node(&node_url)?\n        .with_node_sync_disabled()\n        .finish()?;\n\n    // Get parents for the block.\n    let parents = Parents::new(client.get_tips().await?)?;\n    // Create the block.\n    let block = Block::build(parents).finish()?;\n    // Post the block.\n    let block_id = client.post_block(&block).await?;\n\n    println!("Posted: {block_id:?}");\n\n    Ok(())\n}\n'),(0,i.kt)("p",null,"Run it with"),(0,i.kt)(a.Z,{className:"language-bash",mdxType:"CodeBlock"},"cargo run --example node_api_core_post_block --release -- [NODE URL]"),(0,i.kt)(s.ZP,{mdxType:"MoreExamples"}))}b.isMDXComponent=!0}}]);