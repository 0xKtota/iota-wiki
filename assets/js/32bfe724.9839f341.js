"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[57184],{95515:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var i=t(83117),r=t(80102),o=(t(67294),t(3905)),a=t(66816),l=t(71871),u=t(34369),s=["components"],d={title:"Resolve an IOTA Identity",sidebar_label:"Resolve",description:"Explain how resolving works including arguments",image:"/img/Identity_icon.png",keywords:["Resolve"]},c=void 0,p={unversionedId:"decentralized_identifiers/resolve",id:"decentralized_identifiers/resolve",title:"Resolve an IOTA Identity",description:"Explain how resolving works including arguments",source:"@site/external/identity.rs/documentation/docs/decentralized_identifiers/resolve.mdx",sourceDirName:"decentralized_identifiers",slug:"/decentralized_identifiers/resolve",permalink:"/identity.rs/decentralized_identifiers/resolve",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/decentralized_identifiers/resolve.mdx",tags:[],version:"current",frontMatter:{title:"Resolve an IOTA Identity",sidebar_label:"Resolve",description:"Explain how resolving works including arguments",image:"/img/Identity_icon.png",keywords:["Resolve"]},sidebar:"docs",previous:{title:"Secure",permalink:"/identity.rs/decentralized_identifiers/secure"},next:{title:"Resolve a DID history",permalink:"/identity.rs/decentralized_identifiers/resolve_history"}},m=[{value:"Example",id:"example",children:[],level:2}],f={toc:m};function v(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TODO: Explain how resolving works including arguments."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"A short example that shows how you can resolve a DID Document. This example returns the latest DID Document."),(0,o.kt)(a.Z,{groupId:"programming-languages",defaultValue:"rust",values:[{label:"Rust",value:"rust"},{label:"Node.js",value:"nodejs"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)(u.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! A basic example that generates a DID Document, publishes it to the Tangle,\n//! and retrieves information through DID Document resolution/dereferencing.\n//!\n//! See also https://www.w3.org/TR/did-core/#did-resolution and https://www.w3.org/TR/did-core/#did-url-dereferencing\n//!\n//! cargo run --example resolution\n\nuse identity::did::resolution;\nuse identity::did::resolution::Dereference;\nuse identity::did::resolution::InputMetadata;\nuse identity::did::resolution::Resolution;\nuse identity::did::resolution::Resource;\nuse identity::did::resolution::SecondaryResource;\nuse identity::did::DID;\nuse identity::iota::ClientMap;\nuse identity::iota::IotaDID;\nuse identity::iota::IotaDIDUrl;\nuse identity::iota::Receipt;\nuse identity::prelude::*;\n\nmod create_did;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  // Create a client instance to send messages to the Tangle.\n  let client: ClientMap = ClientMap::new();\n\n  // Create a signed DID Document and KeyPair (see create_did.rs).\n  let (document, _, _): (IotaDocument, KeyPair, Receipt) = create_did::run().await?;\n\n  // ===========================================================================\n  // DID Resolution\n  // ===========================================================================\n\n  let doc_did: &IotaDID = document.id();\n  let did_url: &str = doc_did.as_str();\n\n  // Retrieve the published DID Document from the Tangle.\n  let input: InputMetadata = Default::default();\n  let output: Resolution = resolution::resolve(did_url, input, &client).await?;\n\n  println!("Resolution > {:#?}", output);\n\n  // The resolved Document should be the same as what we published.\n  assert_eq!(&output.document.unwrap(), document.core_document());\n\n  // ===========================================================================\n  // DID Dereferencing\n  // ===========================================================================\n\n  let resource_url: IotaDIDUrl = doc_did.to_url().join("#sign-0")?;\n\n  // Retrieve a subset of the published DID Document properties.\n  let input: InputMetadata = Default::default();\n  let output: Dereference = resolution::dereference(resource_url.to_string(), input, &client).await?;\n\n  println!("Dereference > {:#?}", output);\n\n  // The resolved resource should be the DID Document\'s default signing method.\n  match output.content.unwrap() {\n    Resource::Secondary(SecondaryResource::VerificationKey(method)) => {\n      assert_eq!(method, **document.default_signing_method()?);\n    }\n    resource => {\n      panic!("Invalid Resource Dereference > {:#?}", resource);\n    }\n  }\n\n  Ok(())\n}\n')),(0,o.kt)(l.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Client, Config} from \'@iota/identity-wasm\';\nimport {manipulateIdentity} from "./manipulate_did";\n\n/**\n A short example to show how to resolve a DID. This returns the latest DID Document.\n\n @param {{network: Network, explorer: ExplorerUrl}} clientConfig\n @param {string} did\n **/\nasync function resolution(clientConfig, did) {\n    // Create a default client configuration from the parent config network.\n    const config = Config.fromNetwork(clientConfig.network);\n\n    // Create a client instance to publish messages to the Tangle.\n    const client = Client.fromConfig(config);\n\n    if (!did) {\n        // Creates a new identity, that also is updated (See "manipulate_did" example).\n        let {doc} = await manipulateIdentity(clientConfig);\n        did = doc.id.toString();\n    }\n\n    // Resolve a DID.\n    return await client.resolve(did);\n}\n\nexport {resolution};\n'))))}v.isMDXComponent=!0},71871:function(e,n,t){var i=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},66816:function(e,n,t){t.d(n,{Z:function(){return p}});var i=t(83117),r=t(67294),o=t(5730),a=t(54179);var l=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=t(59137),s=t(86010),d="tabItem_1uMI";function c(e){var n,t,o,a=e.lazy,c=e.block,p=e.defaultValue,m=e.values,f=e.groupId,v=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),D=(0,u.lx)(g,(function(e,n){return e.value===n.value}));if(D.length>0)throw new Error('Docusaurus error: Duplicate values "'+D.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===p?p:null!=(n=null!=p?p:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=h[0])?void 0:o.props.value;if(null!==y&&!g.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=l(),b=w.tabGroupChoices,I=w.setTabGroupChoices,_=(0,r.useState)(y),k=_[0],T=_[1],x=[],C=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var R=b[f];null!=R&&R!==k&&g.some((function(e){return e.value===R}))&&T(R)}var E=function(e){var n=e.currentTarget,t=x.indexOf(n),i=g[t].value;i!==k&&(C(n),T(i),null!=f&&I(f,i))},N=function(e){var n,t=null;switch(e.key){case"ArrowRight":var i=x.indexOf(e.currentTarget)+1;t=x[i]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;t=x[r]||x[x.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},v)},g.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:function(e){return x.push(e)},onKeyDown:N,onFocus:E,onClick:E},o,{className:(0,s.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":k===n})}),null!=t?t:n)}))),a?(0,r.cloneElement)(h.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function p(e){var n=(0,o.Z)();return r.createElement(c,(0,i.Z)({key:String(n)},e))}}}]);