"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[11246],{48358:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return h}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),o=t(66816),l=t(71871),s=t(34369),u=["components"],c={title:"Create a Private Tangle",sidebar_label:"Create a Private Tangle",description:"Create a Private Tangle using the IOTA Identity Rust Library or its WASM binding",image:"/img/Identity_icon.png",keywords:["Rust","WASM"]},d=void 0,p={unversionedId:"decentralized_identifiers/private_tangle",id:"decentralized_identifiers/private_tangle",isDocsHomePage:!1,title:"Create a Private Tangle",description:"Create a Private Tangle using the IOTA Identity Rust Library or its WASM binding",source:"@site/external/identity.rs/documentation/docs/decentralized_identifiers/private_tangle.mdx",sourceDirName:"decentralized_identifiers",slug:"/decentralized_identifiers/private_tangle",permalink:"/identity.rs/decentralized_identifiers/private_tangle",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/decentralized_identifiers/private_tangle.mdx",tags:[],version:"current",frontMatter:{title:"Create a Private Tangle",sidebar_label:"Create a Private Tangle",description:"Create a Private Tangle using the IOTA Identity Rust Library or its WASM binding",image:"/img/Identity_icon.png",keywords:["Rust","WASM"]},sidebar:"docs",previous:{title:"Resolve a DID history",permalink:"/identity.rs/decentralized_identifiers/resolve_history"},next:{title:"Overview",permalink:"/identity.rs/verifiable_credentials/overview"}},h=[{value:"Example",id:"example",children:[{value:"Account Module (Recommended)",id:"account-module-recommended",children:[],level:3},{value:"Low-level API",id:"low-level-api",children:[],level:3}],level:2}],g={toc:h};function m(e){var n=e.components,t=(0,i.Z)(e,u);return(0,r.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"This example shows how you can create a DID on a private tangle. You can run it together with a local ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.iota.org/hornet/welcome"},"Hornet node"),"."),(0,r.kt)("h3",{id:"account-module-recommended"},"Account Module (Recommended)"),(0,r.kt)(s.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example account_config\n\nuse identity::account::Account;\nuse identity::account::AccountBuilder;\nuse identity::account::AccountStorage;\nuse identity::account::AutoSave;\nuse identity::account::IdentitySetup;\nuse identity::account::Result;\nuse identity::iota::ExplorerUrl;\nuse identity::iota::IotaDID;\nuse identity::iota::Network;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  pretty_env_logger::init();\n\n  // Set-up for a private Tangle\n  // You can use https://github.com/iotaledger/one-click-tangle for a local setup.\n  // The `network_name` needs to match the id of the network or a part of it.\n  // As an example we are treating the devnet as a private tangle, so we use `dev`.\n  // When running the local setup, we can use `tangle` since the id of the one-click\n  // private tangle is `private-tangle`, but we can only use 6 characters.\n  // Keep in mind, there are easier ways to change to devnet via `Network::Devnet`\n  let network_name = "dev";\n  let network = Network::try_from_name(network_name)?;\n\n  // If you deployed an explorer locally this would usually be `http://127.0.0.1:8082`\n  let explorer = ExplorerUrl::parse("https://explorer.iota.org/devnet")?;\n\n  // In a locally running one-click tangle, this would often be `http://127.0.0.1:14265`\n  let private_node_url = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\n\n  // Create a new Account with explicit configuration\n  let mut builder: AccountBuilder = Account::builder()\n    .autosave(AutoSave::Never) // never auto-save. rely on the drop save\n    .autosave(AutoSave::Every) // save immediately after every action\n    .autosave(AutoSave::Batch(10)) // save after every 10 actions\n    .autopublish(true) // publish to the tangle automatically on every update\n    .milestone(4) // save a snapshot every 4 actions\n    .storage(AccountStorage::Memory) // use the default in-memory storage\n    // configure a mainnet Tangle client with node and permanode\n    .client(Network::Mainnet, |builder| {\n      builder\n        // Manipulate this in order to manually appoint nodes\n        .node("https://chrysalis-nodes.iota.org")\n        .unwrap() // unwrap is safe, we provided a valid node URL\n        // Set a permanode from the same network (Important)\n        .permanode("https://chrysalis-chronicle.iota.org/api/mainnet/", None, None)\n        .unwrap() // unwrap is safe, we provided a valid permanode URL\n    })\n    // Configure a client for the private network, here `dev`\n    // Also set the URL that points to the REST API of the node\n    .client(network.clone(), |builder| {\n      // unwrap is safe, we provided a valid node URL\n      builder.node(private_node_url).unwrap()\n    });\n\n  // Create an identity specifically on the devnet by passing `network_name`\n  // The same applies if we wanted to create an identity on a private tangle\n  let identity_setup: IdentitySetup = IdentitySetup::new().network(network_name)?;\n\n  let identity: Account = match builder.create_identity(identity_setup).await {\n    Ok(identity) => identity,\n    Err(err) => {\n      eprintln!("[Example] Error: {:?}", err);\n      eprintln!("[Example] Is your Tangle node listening on {}?", private_node_url);\n      return Ok(());\n    }\n  };\n\n  // Prints the Identity Resolver Explorer URL.\n  // The entire history can be observed on this page by clicking "Loading History".\n  let iota_did: &IotaDID = identity.did();\n  println!(\n    "[Example] Explore the DID Document = {}",\n    explorer.resolver_url(iota_did)?\n  );\n\n  Ok(())\n}\n'),(0,r.kt)("h3",{id:"low-level-api"},"Low-level API"),(0,r.kt)(o.Z,{groupId:"programming-languages",defaultValue:"rust",values:[{label:"Rust",value:"rust"},{label:"Node.js",value:"nodejs"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! A basic example that generates and publishes a DID Document\n//! to a private tangle.\n//! It can be run together with a local hornet node.\n//! Refer to https://github.com/iotaledger/one-click-tangle/tree/chrysalis/hornet-private-net\n//! for setup instructions.\n//!\n//! cargo run --example private_tangle\n\nuse identity::iota::ClientBuilder;\nuse identity::iota::DIDMessageEncoding;\nuse identity::iota::ExplorerUrl;\nuse identity::iota::IotaDID;\nuse identity::iota::Network;\nuse identity::iota::Receipt;\nuse identity::iota::TangleRef;\nuse identity::prelude::*;\n\n#[tokio::main]\npub async fn main() -> Result<()> {\n  // Set-up for private Tangle\n  // You can use https://github.com/iotaledger/one-click-tangle for a local setup.\n  // The `network_name` needs to match the id of the network or a part of it.\n  // As an example we are treating the devnet as a private tangle, so we use `dev`.\n  // When running the local setup, we can use `tangle` since the id of the one-click\n  // private tangle is `private-tangle`, but we can only use 6 characters.\n  // Keep in mind, there are easier ways to change to devnet via `Network::Devnet`\n  let network_name = "dev";\n  let network = Network::try_from_name(network_name)?;\n\n  // If you deployed an explorer locally this would usually be `http://127.0.0.1:8082`\n  let explorer = ExplorerUrl::parse("https://explorer.iota.org/devnet")?;\n\n  // In a locally running one-click tangle, this would often be `http://127.0.0.1:14265`\n  let private_node_url = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\n\n  // Use DIDMessageEncoding::Json instead to publish plaintext messages to the Tangle for debugging.\n  let encoding = DIDMessageEncoding::JsonBrotli;\n\n  let client = ClientBuilder::new()\n    .network(network.clone())\n    .encoding(encoding)\n    .node(private_node_url)?\n    .build()\n    .await?;\n\n  // Generate a new Ed25519 public/private key pair.\n  let keypair: KeyPair = KeyPair::new_ed25519()?;\n\n  // Create a DID with the network set explicitly.\n  let mut document: IotaDocument = IotaDocument::new_with_options(&keypair, Some(client.network().name()), None)?;\n\n  // Sign the DID Document with the default signing method.\n  document.sign_self(keypair.private(), &document.default_signing_method()?.id())?;\n\n  // Publish the DID Document to the Tangle.\n  let receipt: Receipt = match client.publish_document(&document).await {\n    Ok(receipt) => receipt,\n    Err(err) => {\n      eprintln!("Error > {:?}", err);\n      eprintln!("Is your private Tangle node listening on {}?", private_node_url);\n      return Ok(());\n    }\n  };\n\n  println!("Publish Receipt > {:#?}", receipt);\n\n  // Prints the Identity Resolver Explorer URL, the entire history can be observed on this page by "Loading History".\n  let iota_did: &IotaDID = document.did();\n  println!(\n    "[Example] Explore the DID Document = {}",\n    explorer.resolver_url(iota_did)?\n  );\n\n  Ok(())\n}\n')),(0,r.kt)(l.Z,{value:"nodejs",mdxType:"TabItem"},(0,r.kt)(s.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Client, Config, Document, ExplorerUrl, KeyPair, KeyType, Network, DIDMessageEncoding} from \'@iota/identity-wasm\';\nimport {logResolverUrl} from "./utils";\n\n/**\n    This example shows how a DID document can be created on a private tangle.\n    It can be run together with a local hornet node.\n    Refer to https://github.com/iotaledger/one-click-tangle/tree/chrysalis/hornet-private-net\n    for setup instructions.\n**/\nasync function privateTangle(restURL, networkName) {\n    // This name needs to match the id of the network or part of it.\n    // Since the id of the one-click private tangle is `private-tangle`\n    // but we can only use 6 characters, we use just `tangle`.\n    const network = Network.try_from_name(networkName || "tangle");\n\n    // Optionally point to a locally-deployed Tangle explorer.\n    const explorer = ExplorerUrl.parse("http://127.0.0.1:8082/");\n\n    // Create a client configuration and set the custom network.\n    const config = new Config();\n    config.setNetwork(network);\n\n    // This URL points to the REST API of the locally running hornet node.\n    config.setNode(restURL || "http://127.0.0.1:14265/");\n\n    // Use DIDMessageEncoding.Json instead to publish plaintext messages to the Tangle for debugging.\n    config.setEncoding(DIDMessageEncoding.JsonBrotli);\n\n    // Create a client instance from the configuration to publish messages to the Tangle.\n    const client = Client.fromConfig(config);\n\n    // Generate a new ed25519 public/private key pair.\n    const key = new KeyPair(KeyType.Ed25519);\n\n    // Create a DID with the network set explicitly.\n    // This will result in a DID prefixed by `did:iota:tangle`.\n    const doc = new Document(key, network.toString());\n\n    // Sign the DID Document with the generated key.\n    doc.signSelf(key, doc.defaultSigningMethod().id.toString());\n\n    // Publish the Identity to the IOTA Network, this may take a few seconds to complete Proof-of-Work.\n    const receipt = await client.publishDocument(doc);\n\n    // Make sure the DID can be resolved on the private tangle\n    const resolved = await client.resolve(doc.id.toString());\n\n    console.log(`Published the DID document to the private tangle:`);\n    console.log(resolved);\n    logResolverUrl("Explore the DID Document:", explorer, doc.id.toString());\n\n    // Return the results.\n    return { key, resolved, receipt };\n}\n\nexport {privateTangle};\n'))))}m.isMDXComponent=!0},71871:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},66816:function(e,n,t){t.d(n,{Z:function(){return p}});var a=t(87462),i=t(67294),r=t(5730),o=t(54179);var l=function(){var e=(0,i.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(86881),u=t(86010),c="tabItem_1uMI";function d(e){var n,t,a,r=e.lazy,o=e.block,d=e.defaultValue,p=e.values,h=e.groupId,g=e.className,m=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:m.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),y=(0,s.lx)(v,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===d?d:null!=(n=null!=d?d:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=m[0])?void 0:a.props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=l(),k=w.tabGroupChoices,b=w.setTabGroupChoices,D=(0,i.useState)(f),I=D[0],_=D[1],x=[],T=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var E=k[h];null!=E&&E!==I&&v.some((function(e){return e.value===E}))&&_(E)}var A=function(e){var n=e.currentTarget,t=x.indexOf(n),a=v[t].value;a!==I&&(T(n),_(a),null!=h&&b(h,a))},C=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;t=x[a]||x[0];break;case"ArrowLeft":var i=x.indexOf(e.currentTarget)-1;t=x[i]||x[x.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":o},g)},v.map((function(e){var n=e.value,t=e.label;return i.createElement("li",{role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,className:(0,u.Z)("tabs__item",c,{"tabs__item--active":I===n}),key:n,ref:function(e){return x.push(e)},onKeyDown:C,onFocus:A,onClick:A},null!=t?t:n)}))),r?(0,i.cloneElement)(m.filter((function(e){return e.props.value===I}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},m.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==I})}))))}function p(e){var n=(0,r.Z)();return i.createElement(d,(0,a.Z)({key:String(n)},e))}},54179:function(e,n,t){var a=(0,t(67294).createContext)(void 0);n.Z=a}}]);