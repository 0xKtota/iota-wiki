"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[97959],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),h=p(r),d=o,u=h["".concat(l,".").concat(d)]||h[d]||m[d]||a;return r?n.createElement(u,i(i({ref:t},s),{},{components:r})):n.createElement(u,i({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},40798:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={description:"Chronicle is the permanode solution for the different IOTA networks.",image:"/img/logo/bee_logo.png",keywords:["Rust","Discord","Permanode","IOTA"]},i="Welcome",c={unversionedId:"welcome",id:"welcome",title:"Welcome",description:"Chronicle is the permanode solution for the different IOTA networks.",source:"@site/content/build/chronicle/develop/documentation/docs/welcome.md",sourceDirName:".",slug:"/welcome",permalink:"/chronicle/develop/welcome",draft:!1,editUrl:"https://github.com/iotaledger/inx-chronicle/edit/main/documentation/content/build/chronicle/develop/documentation/docs/welcome.md",tags:[],version:"current",frontMatter:{description:"Chronicle is the permanode solution for the different IOTA networks.",image:"/img/logo/bee_logo.png",keywords:["Rust","Discord","Permanode","IOTA"]},sidebar:"docs",next:{title:"Docker",permalink:"/chronicle/develop/getting_started/docker"}},l={},p=[],s={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"welcome"},"Welcome"),(0,o.kt)("p",null,(0,o.kt)("h1",{parentName:"p"},"inx-chronicle"),(0,o.kt)("p",{parentName:"p"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/inx-chronicle/actions/workflows/ci.yml"},(0,o.kt)("img",{parentName:"a",src:"https://github.com/iotaledger/inx-chronicle/actions/workflows/ci.yml/badge.svg",alt:"ci"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/inx-chronicle/actions/workflows/canary.yml"},(0,o.kt)("img",{parentName:"a",src:"https://github.com/iotaledger/inx-chronicle/actions/workflows/canary.yml/badge.svg",alt:"Canary"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://coveralls.io/github/iotaledger/inx-chronicle?branch=main"},(0,o.kt)("img",{parentName:"a",src:"https://coveralls.io/repos/github/iotaledger/inx-chronicle/badge.svg?branch=main",alt:"Coverage Status"}))),(0,o.kt)("p",{parentName:"p"},"Chronicle is the permanode (sometimes also called indexer or scanner) for the IOTA-based networks.\nIt connects to a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/hornet"},"Hornet")," via the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/inx"},"IOTA Node Extension (INX)")," interface.\nThrough the INX interface, Chronicle listens to all blocks in the Tangle that are referenced by a milestone and stores them in a ",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB")," database."),(0,o.kt)("p",{parentName:"p"},"Chronicle offers several APIs that are documented ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.iota.org/inx-chronicle/reference/api.md"},"here"),"."),(0,o.kt)("h2",{parentName:"p"},"Documentation"),(0,o.kt)("p",{parentName:"p"},"The documentation for Chronicle can be found in the IOTA wiki: ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.iota.org/chronicle/welcome"},"https://wiki.iota.org/chronicle/welcome"))))}m.isMDXComponent=!0}}]);